// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: anyq.proto

#ifndef PROTOBUF_anyq_2eproto__INCLUDED
#define PROTOBUF_anyq_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace anyq {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_anyq_2eproto();
void protobuf_InitDefaults_anyq_2eproto();
void protobuf_AssignDesc_anyq_2eproto();
void protobuf_ShutdownFile_anyq_2eproto();

class AnalysisConfig;
class AnalysisMethodConfig;
class AnyqStrategyConfig;
class DictConfig;
class DictManagerConfig;
class MatchingConfig;
class PatternConfig;
class RankConfig;
class RankPredict;
class ReqPostprocPluginConfig;
class ReqPreprocPluginConfig;
class RetrievalConfig;
class RetrievalPluginConfig;
class SelectConfig;
class ServerConfig;
class SolrQConfig;
class TFSimConfig;

// ===================================================================

class DictConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.DictConfig) */ {
 public:
  DictConfig();
  virtual ~DictConfig();

  DictConfig(const DictConfig& from);

  inline DictConfig& operator=(const DictConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DictConfig& default_instance();

  static const DictConfig* internal_default_instance();

  void Swap(DictConfig* other);

  // implements Message ----------------------------------------------

  inline DictConfig* New() const { return New(NULL); }

  DictConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DictConfig& from);
  void MergeFrom(const DictConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DictConfig* other);
  void UnsafeMergeFrom(const DictConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string path = 3;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 3;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // optional string blob_name = 4;
  bool has_blob_name() const;
  void clear_blob_name();
  static const int kBlobNameFieldNumber = 4;
  const ::std::string& blob_name() const;
  void set_blob_name(const ::std::string& value);
  void set_blob_name(const char* value);
  void set_blob_name(const char* value, size_t size);
  ::std::string* mutable_blob_name();
  ::std::string* release_blob_name();
  void set_allocated_blob_name(::std::string* blob_name);

  // optional bool is_reload_able = 5;
  bool has_is_reload_able() const;
  void clear_is_reload_able();
  static const int kIsReloadAbleFieldNumber = 5;
  bool is_reload_able() const;
  void set_is_reload_able(bool value);

  // @@protoc_insertion_point(class_scope:anyq.DictConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_blob_name();
  inline void clear_has_blob_name();
  inline void set_has_is_reload_able();
  inline void clear_has_is_reload_able();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr blob_name_;
  bool is_reload_able_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DictConfig> DictConfig_default_instance_;

// -------------------------------------------------------------------

class DictManagerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.DictManagerConfig) */ {
 public:
  DictManagerConfig();
  virtual ~DictManagerConfig();

  DictManagerConfig(const DictManagerConfig& from);

  inline DictManagerConfig& operator=(const DictManagerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DictManagerConfig& default_instance();

  static const DictManagerConfig* internal_default_instance();

  void Swap(DictManagerConfig* other);

  // implements Message ----------------------------------------------

  inline DictManagerConfig* New() const { return New(NULL); }

  DictManagerConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DictManagerConfig& from);
  void MergeFrom(const DictManagerConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DictManagerConfig* other);
  void UnsafeMergeFrom(const DictManagerConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .anyq.DictConfig dict_config = 2;
  int dict_config_size() const;
  void clear_dict_config();
  static const int kDictConfigFieldNumber = 2;
  const ::anyq::DictConfig& dict_config(int index) const;
  ::anyq::DictConfig* mutable_dict_config(int index);
  ::anyq::DictConfig* add_dict_config();
  ::google::protobuf::RepeatedPtrField< ::anyq::DictConfig >*
      mutable_dict_config();
  const ::google::protobuf::RepeatedPtrField< ::anyq::DictConfig >&
      dict_config() const;

  // @@protoc_insertion_point(class_scope:anyq.DictManagerConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::anyq::DictConfig > dict_config_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DictManagerConfig> DictManagerConfig_default_instance_;

// -------------------------------------------------------------------

class AnalysisMethodConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.AnalysisMethodConfig) */ {
 public:
  AnalysisMethodConfig();
  virtual ~AnalysisMethodConfig();

  AnalysisMethodConfig(const AnalysisMethodConfig& from);

  inline AnalysisMethodConfig& operator=(const AnalysisMethodConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalysisMethodConfig& default_instance();

  static const AnalysisMethodConfig* internal_default_instance();

  void Swap(AnalysisMethodConfig* other);

  // implements Message ----------------------------------------------

  inline AnalysisMethodConfig* New() const { return New(NULL); }

  AnalysisMethodConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnalysisMethodConfig& from);
  void MergeFrom(const AnalysisMethodConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnalysisMethodConfig* other);
  void UnsafeMergeFrom(const AnalysisMethodConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string using_dict_name = 3;
  bool has_using_dict_name() const;
  void clear_using_dict_name();
  static const int kUsingDictNameFieldNumber = 3;
  const ::std::string& using_dict_name() const;
  void set_using_dict_name(const ::std::string& value);
  void set_using_dict_name(const char* value);
  void set_using_dict_name(const char* value, size_t size);
  ::std::string* mutable_using_dict_name();
  ::std::string* release_using_dict_name();
  void set_allocated_using_dict_name(::std::string* using_dict_name);

  // optional bool need_phrase_seg = 4;
  bool has_need_phrase_seg() const;
  void clear_need_phrase_seg();
  static const int kNeedPhraseSegFieldNumber = 4;
  bool need_phrase_seg() const;
  void set_need_phrase_seg(bool value);

  // optional string query_feed_name = 5;
  bool has_query_feed_name() const;
  void clear_query_feed_name();
  static const int kQueryFeedNameFieldNumber = 5;
  const ::std::string& query_feed_name() const;
  void set_query_feed_name(const ::std::string& value);
  void set_query_feed_name(const char* value);
  void set_query_feed_name(const char* value, size_t size);
  ::std::string* mutable_query_feed_name();
  ::std::string* release_query_feed_name();
  void set_allocated_query_feed_name(::std::string* query_feed_name);

  // optional string cand_feed_name = 6;
  bool has_cand_feed_name() const;
  void clear_cand_feed_name();
  static const int kCandFeedNameFieldNumber = 6;
  const ::std::string& cand_feed_name() const;
  void set_cand_feed_name(const ::std::string& value);
  void set_cand_feed_name(const char* value);
  void set_cand_feed_name(const char* value, size_t size);
  ::std::string* mutable_cand_feed_name();
  ::std::string* release_cand_feed_name();
  void set_allocated_cand_feed_name(::std::string* cand_feed_name);

  // optional string embedding_fetch_name = 7;
  bool has_embedding_fetch_name() const;
  void clear_embedding_fetch_name();
  static const int kEmbeddingFetchNameFieldNumber = 7;
  const ::std::string& embedding_fetch_name() const;
  void set_embedding_fetch_name(const ::std::string& value);
  void set_embedding_fetch_name(const char* value);
  void set_embedding_fetch_name(const char* value, size_t size);
  ::std::string* mutable_embedding_fetch_name();
  ::std::string* release_embedding_fetch_name();
  void set_allocated_embedding_fetch_name(::std::string* embedding_fetch_name);

  // optional uint32 dim = 8;
  bool has_dim() const;
  void clear_dim();
  static const int kDimFieldNumber = 8;
  ::google::protobuf::uint32 dim() const;
  void set_dim(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:anyq.AnalysisMethodConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_using_dict_name();
  inline void clear_has_using_dict_name();
  inline void set_has_need_phrase_seg();
  inline void clear_has_need_phrase_seg();
  inline void set_has_query_feed_name();
  inline void clear_has_query_feed_name();
  inline void set_has_cand_feed_name();
  inline void clear_has_cand_feed_name();
  inline void set_has_embedding_fetch_name();
  inline void clear_has_embedding_fetch_name();
  inline void set_has_dim();
  inline void clear_has_dim();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr using_dict_name_;
  ::google::protobuf::internal::ArenaStringPtr query_feed_name_;
  ::google::protobuf::internal::ArenaStringPtr cand_feed_name_;
  ::google::protobuf::internal::ArenaStringPtr embedding_fetch_name_;
  bool need_phrase_seg_;
  ::google::protobuf::uint32 dim_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AnalysisMethodConfig> AnalysisMethodConfig_default_instance_;

// -------------------------------------------------------------------

class AnalysisConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.AnalysisConfig) */ {
 public:
  AnalysisConfig();
  virtual ~AnalysisConfig();

  AnalysisConfig(const AnalysisConfig& from);

  inline AnalysisConfig& operator=(const AnalysisConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnalysisConfig& default_instance();

  static const AnalysisConfig* internal_default_instance();

  void Swap(AnalysisConfig* other);

  // implements Message ----------------------------------------------

  inline AnalysisConfig* New() const { return New(NULL); }

  AnalysisConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnalysisConfig& from);
  void MergeFrom(const AnalysisConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnalysisConfig* other);
  void UnsafeMergeFrom(const AnalysisConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string hide_tag = 2;
  bool has_hide_tag() const;
  void clear_hide_tag();
  static const int kHideTagFieldNumber = 2;
  const ::std::string& hide_tag() const;
  void set_hide_tag(const ::std::string& value);
  void set_hide_tag(const char* value);
  void set_hide_tag(const char* value, size_t size);
  ::std::string* mutable_hide_tag();
  ::std::string* release_hide_tag();
  void set_allocated_hide_tag(::std::string* hide_tag);

  // repeated .anyq.AnalysisMethodConfig analysis_method = 3;
  int analysis_method_size() const;
  void clear_analysis_method();
  static const int kAnalysisMethodFieldNumber = 3;
  const ::anyq::AnalysisMethodConfig& analysis_method(int index) const;
  ::anyq::AnalysisMethodConfig* mutable_analysis_method(int index);
  ::anyq::AnalysisMethodConfig* add_analysis_method();
  ::google::protobuf::RepeatedPtrField< ::anyq::AnalysisMethodConfig >*
      mutable_analysis_method();
  const ::google::protobuf::RepeatedPtrField< ::anyq::AnalysisMethodConfig >&
      analysis_method() const;

  // @@protoc_insertion_point(class_scope:anyq.AnalysisConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hide_tag();
  inline void clear_has_hide_tag();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::anyq::AnalysisMethodConfig > analysis_method_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr hide_tag_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AnalysisConfig> AnalysisConfig_default_instance_;

// -------------------------------------------------------------------

class SolrQConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.SolrQConfig) */ {
 public:
  SolrQConfig();
  virtual ~SolrQConfig();

  SolrQConfig(const SolrQConfig& from);

  inline SolrQConfig& operator=(const SolrQConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SolrQConfig& default_instance();

  static const SolrQConfig* internal_default_instance();

  void Swap(SolrQConfig* other);

  // implements Message ----------------------------------------------

  inline SolrQConfig* New() const { return New(NULL); }

  SolrQConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SolrQConfig& from);
  void MergeFrom(const SolrQConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SolrQConfig* other);
  void UnsafeMergeFrom(const SolrQConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string solr_field = 3;
  bool has_solr_field() const;
  void clear_solr_field();
  static const int kSolrFieldFieldNumber = 3;
  const ::std::string& solr_field() const;
  void set_solr_field(const ::std::string& value);
  void set_solr_field(const char* value);
  void set_solr_field(const char* value, size_t size);
  ::std::string* mutable_solr_field();
  ::std::string* release_solr_field();
  void set_allocated_solr_field(::std::string* solr_field);

  // required string source_name = 4;
  bool has_source_name() const;
  void clear_source_name();
  static const int kSourceNameFieldNumber = 4;
  const ::std::string& source_name() const;
  void set_source_name(const ::std::string& value);
  void set_source_name(const char* value);
  void set_source_name(const char* value, size_t size);
  ::std::string* mutable_source_name();
  ::std::string* release_source_name();
  void set_allocated_source_name(::std::string* source_name);

  // optional string weight_dict = 5;
  bool has_weight_dict() const;
  void clear_weight_dict();
  static const int kWeightDictFieldNumber = 5;
  const ::std::string& weight_dict() const;
  void set_weight_dict(const ::std::string& value);
  void set_weight_dict(const char* value);
  void set_weight_dict(const char* value, size_t size);
  ::std::string* mutable_weight_dict();
  ::std::string* release_weight_dict();
  void set_allocated_weight_dict(::std::string* weight_dict);

  // optional string compare_type = 6;
  bool has_compare_type() const;
  void clear_compare_type();
  static const int kCompareTypeFieldNumber = 6;
  const ::std::string& compare_type() const;
  void set_compare_type(const ::std::string& value);
  void set_compare_type(const char* value);
  void set_compare_type(const char* value, size_t size);
  ::std::string* mutable_compare_type();
  ::std::string* release_compare_type();
  void set_allocated_compare_type(::std::string* compare_type);

  // @@protoc_insertion_point(class_scope:anyq.SolrQConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_solr_field();
  inline void clear_has_solr_field();
  inline void set_has_source_name();
  inline void clear_has_source_name();
  inline void set_has_weight_dict();
  inline void clear_has_weight_dict();
  inline void set_has_compare_type();
  inline void clear_has_compare_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr solr_field_;
  ::google::protobuf::internal::ArenaStringPtr source_name_;
  ::google::protobuf::internal::ArenaStringPtr weight_dict_;
  ::google::protobuf::internal::ArenaStringPtr compare_type_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SolrQConfig> SolrQConfig_default_instance_;

// -------------------------------------------------------------------

class RetrievalPluginConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.RetrievalPluginConfig) */ {
 public:
  RetrievalPluginConfig();
  virtual ~RetrievalPluginConfig();

  RetrievalPluginConfig(const RetrievalPluginConfig& from);

  inline RetrievalPluginConfig& operator=(const RetrievalPluginConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetrievalPluginConfig& default_instance();

  static const RetrievalPluginConfig* internal_default_instance();

  void Swap(RetrievalPluginConfig* other);

  // implements Message ----------------------------------------------

  inline RetrievalPluginConfig* New() const { return New(NULL); }

  RetrievalPluginConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetrievalPluginConfig& from);
  void MergeFrom(const RetrievalPluginConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RetrievalPluginConfig* other);
  void UnsafeMergeFrom(const RetrievalPluginConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required uint32 num_result = 3;
  bool has_num_result() const;
  void clear_num_result();
  static const int kNumResultFieldNumber = 3;
  ::google::protobuf::uint32 num_result() const;
  void set_num_result(::google::protobuf::uint32 value);

  // optional string search_host = 4;
  bool has_search_host() const;
  void clear_search_host();
  static const int kSearchHostFieldNumber = 4;
  const ::std::string& search_host() const;
  void set_search_host(const ::std::string& value);
  void set_search_host(const char* value);
  void set_search_host(const char* value, size_t size);
  ::std::string* mutable_search_host();
  ::std::string* release_search_host();
  void set_allocated_search_host(::std::string* search_host);

  // optional uint32 search_port = 5;
  bool has_search_port() const;
  void clear_search_port();
  static const int kSearchPortFieldNumber = 5;
  ::google::protobuf::uint32 search_port() const;
  void set_search_port(::google::protobuf::uint32 value);

  // optional string engine_name = 6;
  bool has_engine_name() const;
  void clear_engine_name();
  static const int kEngineNameFieldNumber = 6;
  const ::std::string& engine_name() const;
  void set_engine_name(const ::std::string& value);
  void set_engine_name(const char* value);
  void set_engine_name(const char* value, size_t size);
  ::std::string* mutable_engine_name();
  ::std::string* release_engine_name();
  void set_allocated_engine_name(::std::string* engine_name);

  // optional string solr_result_fl = 7;
  bool has_solr_result_fl() const;
  void clear_solr_result_fl();
  static const int kSolrResultFlFieldNumber = 7;
  const ::std::string& solr_result_fl() const;
  void set_solr_result_fl(const ::std::string& value);
  void set_solr_result_fl(const char* value);
  void set_solr_result_fl(const char* value, size_t size);
  ::std::string* mutable_solr_result_fl();
  ::std::string* release_solr_result_fl();
  void set_allocated_solr_result_fl(::std::string* solr_result_fl);

  // repeated .anyq.SolrQConfig solr_q = 8;
  int solr_q_size() const;
  void clear_solr_q();
  static const int kSolrQFieldNumber = 8;
  const ::anyq::SolrQConfig& solr_q(int index) const;
  ::anyq::SolrQConfig* mutable_solr_q(int index);
  ::anyq::SolrQConfig* add_solr_q();
  ::google::protobuf::RepeatedPtrField< ::anyq::SolrQConfig >*
      mutable_solr_q();
  const ::google::protobuf::RepeatedPtrField< ::anyq::SolrQConfig >&
      solr_q() const;

  // optional uint32 vector_size = 9;
  bool has_vector_size() const;
  void clear_vector_size();
  static const int kVectorSizeFieldNumber = 9;
  ::google::protobuf::uint32 vector_size() const;
  void set_vector_size(::google::protobuf::uint32 value);

  // optional uint32 search_k = 10;
  bool has_search_k() const;
  void clear_search_k();
  static const int kSearchKFieldNumber = 10;
  ::google::protobuf::uint32 search_k() const;
  void set_search_k(::google::protobuf::uint32 value);

  // optional string index_path = 11;
  bool has_index_path() const;
  void clear_index_path();
  static const int kIndexPathFieldNumber = 11;
  const ::std::string& index_path() const;
  void set_index_path(const ::std::string& value);
  void set_index_path(const char* value);
  void set_index_path(const char* value, size_t size);
  ::std::string* mutable_index_path();
  ::std::string* release_index_path();
  void set_allocated_index_path(::std::string* index_path);

  // optional string using_dict_name = 12;
  bool has_using_dict_name() const;
  void clear_using_dict_name();
  static const int kUsingDictNameFieldNumber = 12;
  const ::std::string& using_dict_name() const;
  void set_using_dict_name(const ::std::string& value);
  void set_using_dict_name(const char* value);
  void set_using_dict_name(const char* value, size_t size);
  ::std::string* mutable_using_dict_name();
  ::std::string* release_using_dict_name();
  void set_allocated_using_dict_name(::std::string* using_dict_name);

  // optional string type_name = 14;
  bool has_type_name() const;
  void clear_type_name();
  static const int kTypeNameFieldNumber = 14;
  const ::std::string& type_name() const;
  void set_type_name(const ::std::string& value);
  void set_type_name(const char* value);
  void set_type_name(const char* value, size_t size);
  ::std::string* mutable_type_name();
  ::std::string* release_type_name();
  void set_allocated_type_name(::std::string* type_name);

  // @@protoc_insertion_point(class_scope:anyq.RetrievalPluginConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_num_result();
  inline void clear_has_num_result();
  inline void set_has_search_host();
  inline void clear_has_search_host();
  inline void set_has_search_port();
  inline void clear_has_search_port();
  inline void set_has_engine_name();
  inline void clear_has_engine_name();
  inline void set_has_solr_result_fl();
  inline void clear_has_solr_result_fl();
  inline void set_has_vector_size();
  inline void clear_has_vector_size();
  inline void set_has_search_k();
  inline void clear_has_search_k();
  inline void set_has_index_path();
  inline void clear_has_index_path();
  inline void set_has_using_dict_name();
  inline void clear_has_using_dict_name();
  inline void set_has_type_name();
  inline void clear_has_type_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::anyq::SolrQConfig > solr_q_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr search_host_;
  ::google::protobuf::internal::ArenaStringPtr engine_name_;
  ::google::protobuf::internal::ArenaStringPtr solr_result_fl_;
  ::google::protobuf::internal::ArenaStringPtr index_path_;
  ::google::protobuf::internal::ArenaStringPtr using_dict_name_;
  ::google::protobuf::internal::ArenaStringPtr type_name_;
  ::google::protobuf::uint32 num_result_;
  ::google::protobuf::uint32 search_port_;
  ::google::protobuf::uint32 vector_size_;
  ::google::protobuf::uint32 search_k_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RetrievalPluginConfig> RetrievalPluginConfig_default_instance_;

// -------------------------------------------------------------------

class RetrievalConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.RetrievalConfig) */ {
 public:
  RetrievalConfig();
  virtual ~RetrievalConfig();

  RetrievalConfig(const RetrievalConfig& from);

  inline RetrievalConfig& operator=(const RetrievalConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetrievalConfig& default_instance();

  static const RetrievalConfig* internal_default_instance();

  void Swap(RetrievalConfig* other);

  // implements Message ----------------------------------------------

  inline RetrievalConfig* New() const { return New(NULL); }

  RetrievalConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetrievalConfig& from);
  void MergeFrom(const RetrievalConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RetrievalConfig* other);
  void UnsafeMergeFrom(const RetrievalConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .anyq.RetrievalPluginConfig retrieval_plugin = 1;
  int retrieval_plugin_size() const;
  void clear_retrieval_plugin();
  static const int kRetrievalPluginFieldNumber = 1;
  const ::anyq::RetrievalPluginConfig& retrieval_plugin(int index) const;
  ::anyq::RetrievalPluginConfig* mutable_retrieval_plugin(int index);
  ::anyq::RetrievalPluginConfig* add_retrieval_plugin();
  ::google::protobuf::RepeatedPtrField< ::anyq::RetrievalPluginConfig >*
      mutable_retrieval_plugin();
  const ::google::protobuf::RepeatedPtrField< ::anyq::RetrievalPluginConfig >&
      retrieval_plugin() const;

  // @@protoc_insertion_point(class_scope:anyq.RetrievalConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::anyq::RetrievalPluginConfig > retrieval_plugin_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RetrievalConfig> RetrievalConfig_default_instance_;

// -------------------------------------------------------------------

class SelectConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.SelectConfig) */ {
 public:
  SelectConfig();
  virtual ~SelectConfig();

  SelectConfig(const SelectConfig& from);

  inline SelectConfig& operator=(const SelectConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SelectConfig& default_instance();

  static const SelectConfig* internal_default_instance();

  void Swap(SelectConfig* other);

  // implements Message ----------------------------------------------

  inline SelectConfig* New() const { return New(NULL); }

  SelectConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SelectConfig& from);
  void MergeFrom(const SelectConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelectConfig* other);
  void UnsafeMergeFrom(const SelectConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 select_index = 1;
  bool has_select_index() const;
  void clear_select_index();
  static const int kSelectIndexFieldNumber = 1;
  ::google::protobuf::int32 select_index() const;
  void set_select_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:anyq.SelectConfig)
 private:
  inline void set_has_select_index();
  inline void clear_has_select_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 select_index_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SelectConfig> SelectConfig_default_instance_;

// -------------------------------------------------------------------

class RankPredict : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.RankPredict) */ {
 public:
  RankPredict();
  virtual ~RankPredict();

  RankPredict(const RankPredict& from);

  inline RankPredict& operator=(const RankPredict& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankPredict& default_instance();

  static const RankPredict* internal_default_instance();

  void Swap(RankPredict* other);

  // implements Message ----------------------------------------------

  inline RankPredict* New() const { return New(NULL); }

  RankPredict* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankPredict& from);
  void MergeFrom(const RankPredict& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RankPredict* other);
  void UnsafeMergeFrom(const RankPredict& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string using_dict_name = 2;
  bool has_using_dict_name() const;
  void clear_using_dict_name();
  static const int kUsingDictNameFieldNumber = 2;
  const ::std::string& using_dict_name() const;
  void set_using_dict_name(const ::std::string& value);
  void set_using_dict_name(const char* value);
  void set_using_dict_name(const char* value, size_t size);
  ::std::string* mutable_using_dict_name();
  ::std::string* release_using_dict_name();
  void set_allocated_using_dict_name(::std::string* using_dict_name);

  // optional string booster_model_path = 3;
  bool has_booster_model_path() const;
  void clear_booster_model_path();
  static const int kBoosterModelPathFieldNumber = 3;
  const ::std::string& booster_model_path() const;
  void set_booster_model_path(const ::std::string& value);
  void set_booster_model_path(const char* value);
  void set_booster_model_path(const char* value, size_t size);
  ::std::string* mutable_booster_model_path();
  ::std::string* release_booster_model_path();
  void set_allocated_booster_model_path(::std::string* booster_model_path);

  // optional .anyq.SelectConfig select_config = 101;
  bool has_select_config() const;
  void clear_select_config();
  static const int kSelectConfigFieldNumber = 101;
  const ::anyq::SelectConfig& select_config() const;
  ::anyq::SelectConfig* mutable_select_config();
  ::anyq::SelectConfig* release_select_config();
  void set_allocated_select_config(::anyq::SelectConfig* select_config);

  // @@protoc_insertion_point(class_scope:anyq.RankPredict)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_using_dict_name();
  inline void clear_has_using_dict_name();
  inline void set_has_booster_model_path();
  inline void clear_has_booster_model_path();
  inline void set_has_select_config();
  inline void clear_has_select_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr using_dict_name_;
  ::google::protobuf::internal::ArenaStringPtr booster_model_path_;
  ::anyq::SelectConfig* select_config_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RankPredict> RankPredict_default_instance_;

// -------------------------------------------------------------------

class PatternConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.PatternConfig) */ {
 public:
  PatternConfig();
  virtual ~PatternConfig();

  PatternConfig(const PatternConfig& from);

  inline PatternConfig& operator=(const PatternConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PatternConfig& default_instance();

  static const PatternConfig* internal_default_instance();

  void Swap(PatternConfig* other);

  // implements Message ----------------------------------------------

  inline PatternConfig* New() const { return New(NULL); }

  PatternConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PatternConfig& from);
  void MergeFrom(const PatternConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PatternConfig* other);
  void UnsafeMergeFrom(const PatternConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string pat_fname = 1;
  bool has_pat_fname() const;
  void clear_pat_fname();
  static const int kPatFnameFieldNumber = 1;
  const ::std::string& pat_fname() const;
  void set_pat_fname(const ::std::string& value);
  void set_pat_fname(const char* value);
  void set_pat_fname(const char* value, size_t size);
  ::std::string* mutable_pat_fname();
  ::std::string* release_pat_fname();
  void set_allocated_pat_fname(::std::string* pat_fname);

  // required string dict_fname = 2;
  bool has_dict_fname() const;
  void clear_dict_fname();
  static const int kDictFnameFieldNumber = 2;
  const ::std::string& dict_fname() const;
  void set_dict_fname(const ::std::string& value);
  void set_dict_fname(const char* value);
  void set_dict_fname(const char* value, size_t size);
  ::std::string* mutable_dict_fname();
  ::std::string* release_dict_fname();
  void set_allocated_dict_fname(::std::string* dict_fname);

  // required string igno_fname = 3;
  bool has_igno_fname() const;
  void clear_igno_fname();
  static const int kIgnoFnameFieldNumber = 3;
  const ::std::string& igno_fname() const;
  void set_igno_fname(const ::std::string& value);
  void set_igno_fname(const char* value);
  void set_igno_fname(const char* value, size_t size);
  ::std::string* mutable_igno_fname();
  ::std::string* release_igno_fname();
  void set_allocated_igno_fname(::std::string* igno_fname);

  // @@protoc_insertion_point(class_scope:anyq.PatternConfig)
 private:
  inline void set_has_pat_fname();
  inline void clear_has_pat_fname();
  inline void set_has_dict_fname();
  inline void clear_has_dict_fname();
  inline void set_has_igno_fname();
  inline void clear_has_igno_fname();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr pat_fname_;
  ::google::protobuf::internal::ArenaStringPtr dict_fname_;
  ::google::protobuf::internal::ArenaStringPtr igno_fname_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<PatternConfig> PatternConfig_default_instance_;

// -------------------------------------------------------------------

class TFSimConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.TFSimConfig) */ {
 public:
  TFSimConfig();
  virtual ~TFSimConfig();

  TFSimConfig(const TFSimConfig& from);

  inline TFSimConfig& operator=(const TFSimConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFSimConfig& default_instance();

  static const TFSimConfig* internal_default_instance();

  void Swap(TFSimConfig* other);

  // implements Message ----------------------------------------------

  inline TFSimConfig* New() const { return New(NULL); }

  TFSimConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFSimConfig& from);
  void MergeFrom(const TFSimConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TFSimConfig* other);
  void UnsafeMergeFrom(const TFSimConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pad_id = 1;
  bool has_pad_id() const;
  void clear_pad_id();
  static const int kPadIdFieldNumber = 1;
  ::google::protobuf::int32 pad_id() const;
  void set_pad_id(::google::protobuf::int32 value);

  // optional int32 sen_len = 2;
  bool has_sen_len() const;
  void clear_sen_len();
  static const int kSenLenFieldNumber = 2;
  ::google::protobuf::int32 sen_len() const;
  void set_sen_len(::google::protobuf::int32 value);

  // optional string left_input_name = 3;
  bool has_left_input_name() const;
  void clear_left_input_name();
  static const int kLeftInputNameFieldNumber = 3;
  const ::std::string& left_input_name() const;
  void set_left_input_name(const ::std::string& value);
  void set_left_input_name(const char* value);
  void set_left_input_name(const char* value, size_t size);
  ::std::string* mutable_left_input_name();
  ::std::string* release_left_input_name();
  void set_allocated_left_input_name(::std::string* left_input_name);

  // optional string right_input_name = 4;
  bool has_right_input_name() const;
  void clear_right_input_name();
  static const int kRightInputNameFieldNumber = 4;
  const ::std::string& right_input_name() const;
  void set_right_input_name(const ::std::string& value);
  void set_right_input_name(const char* value);
  void set_right_input_name(const char* value, size_t size);
  ::std::string* mutable_right_input_name();
  ::std::string* release_right_input_name();
  void set_allocated_right_input_name(::std::string* right_input_name);

  // optional string output_name = 5;
  bool has_output_name() const;
  void clear_output_name();
  static const int kOutputNameFieldNumber = 5;
  const ::std::string& output_name() const;
  void set_output_name(const ::std::string& value);
  void set_output_name(const char* value);
  void set_output_name(const char* value, size_t size);
  ::std::string* mutable_output_name();
  ::std::string* release_output_name();
  void set_allocated_output_name(::std::string* output_name);

  // @@protoc_insertion_point(class_scope:anyq.TFSimConfig)
 private:
  inline void set_has_pad_id();
  inline void clear_has_pad_id();
  inline void set_has_sen_len();
  inline void clear_has_sen_len();
  inline void set_has_left_input_name();
  inline void clear_has_left_input_name();
  inline void set_has_right_input_name();
  inline void clear_has_right_input_name();
  inline void set_has_output_name();
  inline void clear_has_output_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr left_input_name_;
  ::google::protobuf::internal::ArenaStringPtr right_input_name_;
  ::google::protobuf::internal::ArenaStringPtr output_name_;
  ::google::protobuf::int32 pad_id_;
  ::google::protobuf::int32 sen_len_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TFSimConfig> TFSimConfig_default_instance_;

// -------------------------------------------------------------------

class MatchingConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.MatchingConfig) */ {
 public:
  MatchingConfig();
  virtual ~MatchingConfig();

  MatchingConfig(const MatchingConfig& from);

  inline MatchingConfig& operator=(const MatchingConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchingConfig& default_instance();

  static const MatchingConfig* internal_default_instance();

  void Swap(MatchingConfig* other);

  // implements Message ----------------------------------------------

  inline MatchingConfig* New() const { return New(NULL); }

  MatchingConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchingConfig& from);
  void MergeFrom(const MatchingConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchingConfig* other);
  void UnsafeMergeFrom(const MatchingConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional string using_dict_name = 3;
  bool has_using_dict_name() const;
  void clear_using_dict_name();
  static const int kUsingDictNameFieldNumber = 3;
  const ::std::string& using_dict_name() const;
  void set_using_dict_name(const ::std::string& value);
  void set_using_dict_name(const char* value);
  void set_using_dict_name(const char* value, size_t size);
  ::std::string* mutable_using_dict_name();
  ::std::string* release_using_dict_name();
  void set_allocated_using_dict_name(::std::string* using_dict_name);

  // required int32 output_num = 4;
  bool has_output_num() const;
  void clear_output_num();
  static const int kOutputNumFieldNumber = 4;
  ::google::protobuf::int32 output_num() const;
  void set_output_num(::google::protobuf::int32 value);

  // required bool rough = 5;
  bool has_rough() const;
  void clear_rough();
  static const int kRoughFieldNumber = 5;
  bool rough() const;
  void set_rough(bool value);

  // optional .anyq.PatternConfig pattern = 6;
  bool has_pattern() const;
  void clear_pattern();
  static const int kPatternFieldNumber = 6;
  const ::anyq::PatternConfig& pattern() const;
  ::anyq::PatternConfig* mutable_pattern();
  ::anyq::PatternConfig* release_pattern();
  void set_allocated_pattern(::anyq::PatternConfig* pattern);

  // optional .anyq.TFSimConfig tfconf = 10;
  bool has_tfconf() const;
  void clear_tfconf();
  static const int kTfconfFieldNumber = 10;
  const ::anyq::TFSimConfig& tfconf() const;
  ::anyq::TFSimConfig* mutable_tfconf();
  ::anyq::TFSimConfig* release_tfconf();
  void set_allocated_tfconf(::anyq::TFSimConfig* tfconf);

  // optional string query_feed_name = 11;
  bool has_query_feed_name() const;
  void clear_query_feed_name();
  static const int kQueryFeedNameFieldNumber = 11;
  const ::std::string& query_feed_name() const;
  void set_query_feed_name(const ::std::string& value);
  void set_query_feed_name(const char* value);
  void set_query_feed_name(const char* value, size_t size);
  ::std::string* mutable_query_feed_name();
  ::std::string* release_query_feed_name();
  void set_allocated_query_feed_name(::std::string* query_feed_name);

  // optional string cand_feed_name = 12;
  bool has_cand_feed_name() const;
  void clear_cand_feed_name();
  static const int kCandFeedNameFieldNumber = 12;
  const ::std::string& cand_feed_name() const;
  void set_cand_feed_name(const ::std::string& value);
  void set_cand_feed_name(const char* value);
  void set_cand_feed_name(const char* value, size_t size);
  ::std::string* mutable_cand_feed_name();
  ::std::string* release_cand_feed_name();
  void set_allocated_cand_feed_name(::std::string* cand_feed_name);

  // optional string score_fetch_name = 13;
  bool has_score_fetch_name() const;
  void clear_score_fetch_name();
  static const int kScoreFetchNameFieldNumber = 13;
  const ::std::string& score_fetch_name() const;
  void set_score_fetch_name(const ::std::string& value);
  void set_score_fetch_name(const char* value);
  void set_score_fetch_name(const char* value, size_t size);
  ::std::string* mutable_score_fetch_name();
  ::std::string* release_score_fetch_name();
  void set_allocated_score_fetch_name(::std::string* score_fetch_name);

  // @@protoc_insertion_point(class_scope:anyq.MatchingConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_using_dict_name();
  inline void clear_has_using_dict_name();
  inline void set_has_output_num();
  inline void clear_has_output_num();
  inline void set_has_rough();
  inline void clear_has_rough();
  inline void set_has_pattern();
  inline void clear_has_pattern();
  inline void set_has_tfconf();
  inline void clear_has_tfconf();
  inline void set_has_query_feed_name();
  inline void clear_has_query_feed_name();
  inline void set_has_cand_feed_name();
  inline void clear_has_cand_feed_name();
  inline void set_has_score_fetch_name();
  inline void clear_has_score_fetch_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr using_dict_name_;
  ::google::protobuf::internal::ArenaStringPtr query_feed_name_;
  ::google::protobuf::internal::ArenaStringPtr cand_feed_name_;
  ::google::protobuf::internal::ArenaStringPtr score_fetch_name_;
  ::anyq::PatternConfig* pattern_;
  ::anyq::TFSimConfig* tfconf_;
  ::google::protobuf::int32 output_num_;
  bool rough_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<MatchingConfig> MatchingConfig_default_instance_;

// -------------------------------------------------------------------

class RankConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.RankConfig) */ {
 public:
  RankConfig();
  virtual ~RankConfig();

  RankConfig(const RankConfig& from);

  inline RankConfig& operator=(const RankConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankConfig& default_instance();

  static const RankConfig* internal_default_instance();

  void Swap(RankConfig* other);

  // implements Message ----------------------------------------------

  inline RankConfig* New() const { return New(NULL); }

  RankConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankConfig& from);
  void MergeFrom(const RankConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RankConfig* other);
  void UnsafeMergeFrom(const RankConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 rough_top_result = 2;
  bool has_rough_top_result() const;
  void clear_rough_top_result();
  static const int kRoughTopResultFieldNumber = 2;
  ::google::protobuf::int32 rough_top_result() const;
  void set_rough_top_result(::google::protobuf::int32 value);

  // optional int32 top_result = 3;
  bool has_top_result() const;
  void clear_top_result();
  static const int kTopResultFieldNumber = 3;
  ::google::protobuf::int32 top_result() const;
  void set_top_result(::google::protobuf::int32 value);

  // repeated .anyq.MatchingConfig matching_config = 4;
  int matching_config_size() const;
  void clear_matching_config();
  static const int kMatchingConfigFieldNumber = 4;
  const ::anyq::MatchingConfig& matching_config(int index) const;
  ::anyq::MatchingConfig* mutable_matching_config(int index);
  ::anyq::MatchingConfig* add_matching_config();
  ::google::protobuf::RepeatedPtrField< ::anyq::MatchingConfig >*
      mutable_matching_config();
  const ::google::protobuf::RepeatedPtrField< ::anyq::MatchingConfig >&
      matching_config() const;

  // optional .anyq.RankPredict rough_rank_predictor = 5;
  bool has_rough_rank_predictor() const;
  void clear_rough_rank_predictor();
  static const int kRoughRankPredictorFieldNumber = 5;
  const ::anyq::RankPredict& rough_rank_predictor() const;
  ::anyq::RankPredict* mutable_rough_rank_predictor();
  ::anyq::RankPredict* release_rough_rank_predictor();
  void set_allocated_rough_rank_predictor(::anyq::RankPredict* rough_rank_predictor);

  // optional .anyq.RankPredict rank_predictor = 6;
  bool has_rank_predictor() const;
  void clear_rank_predictor();
  static const int kRankPredictorFieldNumber = 6;
  const ::anyq::RankPredict& rank_predictor() const;
  ::anyq::RankPredict* mutable_rank_predictor();
  ::anyq::RankPredict* release_rank_predictor();
  void set_allocated_rank_predictor(::anyq::RankPredict* rank_predictor);

  // optional float rough_threshold = 7;
  bool has_rough_threshold() const;
  void clear_rough_threshold();
  static const int kRoughThresholdFieldNumber = 7;
  float rough_threshold() const;
  void set_rough_threshold(float value);

  // optional float threshold = 8;
  bool has_threshold() const;
  void clear_threshold();
  static const int kThresholdFieldNumber = 8;
  float threshold() const;
  void set_threshold(float value);

  // optional bool deep_rank_with_answer = 9;
  bool has_deep_rank_with_answer() const;
  void clear_deep_rank_with_answer();
  static const int kDeepRankWithAnswerFieldNumber = 9;
  bool deep_rank_with_answer() const;
  void set_deep_rank_with_answer(bool value);

  // optional int32 max_ans_num_per_query = 10;
  bool has_max_ans_num_per_query() const;
  void clear_max_ans_num_per_query();
  static const int kMaxAnsNumPerQueryFieldNumber = 10;
  ::google::protobuf::int32 max_ans_num_per_query() const;
  void set_max_ans_num_per_query(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:anyq.RankConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rough_top_result();
  inline void clear_has_rough_top_result();
  inline void set_has_top_result();
  inline void clear_has_top_result();
  inline void set_has_rough_rank_predictor();
  inline void clear_has_rough_rank_predictor();
  inline void set_has_rank_predictor();
  inline void clear_has_rank_predictor();
  inline void set_has_rough_threshold();
  inline void clear_has_rough_threshold();
  inline void set_has_threshold();
  inline void clear_has_threshold();
  inline void set_has_deep_rank_with_answer();
  inline void clear_has_deep_rank_with_answer();
  inline void set_has_max_ans_num_per_query();
  inline void clear_has_max_ans_num_per_query();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::anyq::MatchingConfig > matching_config_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::anyq::RankPredict* rough_rank_predictor_;
  ::anyq::RankPredict* rank_predictor_;
  ::google::protobuf::int32 rough_top_result_;
  ::google::protobuf::int32 top_result_;
  float rough_threshold_;
  float threshold_;
  bool deep_rank_with_answer_;
  ::google::protobuf::int32 max_ans_num_per_query_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RankConfig> RankConfig_default_instance_;

// -------------------------------------------------------------------

class AnyqStrategyConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.AnyqStrategyConfig) */ {
 public:
  AnyqStrategyConfig();
  virtual ~AnyqStrategyConfig();

  AnyqStrategyConfig(const AnyqStrategyConfig& from);

  inline AnyqStrategyConfig& operator=(const AnyqStrategyConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnyqStrategyConfig& default_instance();

  static const AnyqStrategyConfig* internal_default_instance();

  void Swap(AnyqStrategyConfig* other);

  // implements Message ----------------------------------------------

  inline AnyqStrategyConfig* New() const { return New(NULL); }

  AnyqStrategyConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnyqStrategyConfig& from);
  void MergeFrom(const AnyqStrategyConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnyqStrategyConfig* other);
  void UnsafeMergeFrom(const AnyqStrategyConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string analysis_config = 1;
  bool has_analysis_config() const;
  void clear_analysis_config();
  static const int kAnalysisConfigFieldNumber = 1;
  const ::std::string& analysis_config() const;
  void set_analysis_config(const ::std::string& value);
  void set_analysis_config(const char* value);
  void set_analysis_config(const char* value, size_t size);
  ::std::string* mutable_analysis_config();
  ::std::string* release_analysis_config();
  void set_allocated_analysis_config(::std::string* analysis_config);

  // optional string retrieval_config = 2;
  bool has_retrieval_config() const;
  void clear_retrieval_config();
  static const int kRetrievalConfigFieldNumber = 2;
  const ::std::string& retrieval_config() const;
  void set_retrieval_config(const ::std::string& value);
  void set_retrieval_config(const char* value);
  void set_retrieval_config(const char* value, size_t size);
  ::std::string* mutable_retrieval_config();
  ::std::string* release_retrieval_config();
  void set_allocated_retrieval_config(::std::string* retrieval_config);

  // optional string rank_config = 3;
  bool has_rank_config() const;
  void clear_rank_config();
  static const int kRankConfigFieldNumber = 3;
  const ::std::string& rank_config() const;
  void set_rank_config(const ::std::string& value);
  void set_rank_config(const char* value);
  void set_rank_config(const char* value, size_t size);
  ::std::string* mutable_rank_config();
  ::std::string* release_rank_config();
  void set_allocated_rank_config(::std::string* rank_config);

  // @@protoc_insertion_point(class_scope:anyq.AnyqStrategyConfig)
 private:
  inline void set_has_analysis_config();
  inline void clear_has_analysis_config();
  inline void set_has_retrieval_config();
  inline void clear_has_retrieval_config();
  inline void set_has_rank_config();
  inline void clear_has_rank_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr analysis_config_;
  ::google::protobuf::internal::ArenaStringPtr retrieval_config_;
  ::google::protobuf::internal::ArenaStringPtr rank_config_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AnyqStrategyConfig> AnyqStrategyConfig_default_instance_;

// -------------------------------------------------------------------

class ReqPreprocPluginConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.ReqPreprocPluginConfig) */ {
 public:
  ReqPreprocPluginConfig();
  virtual ~ReqPreprocPluginConfig();

  ReqPreprocPluginConfig(const ReqPreprocPluginConfig& from);

  inline ReqPreprocPluginConfig& operator=(const ReqPreprocPluginConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPreprocPluginConfig& default_instance();

  static const ReqPreprocPluginConfig* internal_default_instance();

  void Swap(ReqPreprocPluginConfig* other);

  // implements Message ----------------------------------------------

  inline ReqPreprocPluginConfig* New() const { return New(NULL); }

  ReqPreprocPluginConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPreprocPluginConfig& from);
  void MergeFrom(const ReqPreprocPluginConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqPreprocPluginConfig* other);
  void UnsafeMergeFrom(const ReqPreprocPluginConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:anyq.ReqPreprocPluginConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReqPreprocPluginConfig> ReqPreprocPluginConfig_default_instance_;

// -------------------------------------------------------------------

class ReqPostprocPluginConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.ReqPostprocPluginConfig) */ {
 public:
  ReqPostprocPluginConfig();
  virtual ~ReqPostprocPluginConfig();

  ReqPostprocPluginConfig(const ReqPostprocPluginConfig& from);

  inline ReqPostprocPluginConfig& operator=(const ReqPostprocPluginConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPostprocPluginConfig& default_instance();

  static const ReqPostprocPluginConfig* internal_default_instance();

  void Swap(ReqPostprocPluginConfig* other);

  // implements Message ----------------------------------------------

  inline ReqPostprocPluginConfig* New() const { return New(NULL); }

  ReqPostprocPluginConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPostprocPluginConfig& from);
  void MergeFrom(const ReqPostprocPluginConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqPostprocPluginConfig* other);
  void UnsafeMergeFrom(const ReqPostprocPluginConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:anyq.ReqPostprocPluginConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReqPostprocPluginConfig> ReqPostprocPluginConfig_default_instance_;

// -------------------------------------------------------------------

class ServerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:anyq.ServerConfig) */ {
 public:
  ServerConfig();
  virtual ~ServerConfig();

  ServerConfig(const ServerConfig& from);

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConfig& default_instance();

  static const ServerConfig* internal_default_instance();

  void Swap(ServerConfig* other);

  // implements Message ----------------------------------------------

  inline ServerConfig* New() const { return New(NULL); }

  ServerConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerConfig* other);
  void UnsafeMergeFrom(const ServerConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 idle_timeout_sec = 1;
  bool has_idle_timeout_sec() const;
  void clear_idle_timeout_sec();
  static const int kIdleTimeoutSecFieldNumber = 1;
  ::google::protobuf::int32 idle_timeout_sec() const;
  void set_idle_timeout_sec(::google::protobuf::int32 value);

  // required int32 max_concurrency = 2;
  bool has_max_concurrency() const;
  void clear_max_concurrency();
  static const int kMaxConcurrencyFieldNumber = 2;
  ::google::protobuf::int32 max_concurrency() const;
  void set_max_concurrency(::google::protobuf::int32 value);

  // required int32 port = 3;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 3;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // required string server_conf_dir = 4;
  bool has_server_conf_dir() const;
  void clear_server_conf_dir();
  static const int kServerConfDirFieldNumber = 4;
  const ::std::string& server_conf_dir() const;
  void set_server_conf_dir(const ::std::string& value);
  void set_server_conf_dir(const char* value);
  void set_server_conf_dir(const char* value, size_t size);
  ::std::string* mutable_server_conf_dir();
  ::std::string* release_server_conf_dir();
  void set_allocated_server_conf_dir(::std::string* server_conf_dir);

  // required string log_conf_file = 5;
  bool has_log_conf_file() const;
  void clear_log_conf_file();
  static const int kLogConfFileFieldNumber = 5;
  const ::std::string& log_conf_file() const;
  void set_log_conf_file(const ::std::string& value);
  void set_log_conf_file(const char* value);
  void set_log_conf_file(const char* value, size_t size);
  ::std::string* mutable_log_conf_file();
  ::std::string* release_log_conf_file();
  void set_allocated_log_conf_file(::std::string* log_conf_file);

  // required string anyq_dict_conf_dir = 6;
  bool has_anyq_dict_conf_dir() const;
  void clear_anyq_dict_conf_dir();
  static const int kAnyqDictConfDirFieldNumber = 6;
  const ::std::string& anyq_dict_conf_dir() const;
  void set_anyq_dict_conf_dir(const ::std::string& value);
  void set_anyq_dict_conf_dir(const char* value);
  void set_anyq_dict_conf_dir(const char* value, size_t size);
  ::std::string* mutable_anyq_dict_conf_dir();
  ::std::string* release_anyq_dict_conf_dir();
  void set_allocated_anyq_dict_conf_dir(::std::string* anyq_dict_conf_dir);

  // required string anyq_conf_dir = 7;
  bool has_anyq_conf_dir() const;
  void clear_anyq_conf_dir();
  static const int kAnyqConfDirFieldNumber = 7;
  const ::std::string& anyq_conf_dir() const;
  void set_anyq_conf_dir(const ::std::string& value);
  void set_anyq_conf_dir(const char* value);
  void set_anyq_conf_dir(const char* value, size_t size);
  ::std::string* mutable_anyq_conf_dir();
  ::std::string* release_anyq_conf_dir();
  void set_allocated_anyq_conf_dir(::std::string* anyq_conf_dir);

  // required .anyq.ReqPreprocPluginConfig preproc_plugin = 8;
  bool has_preproc_plugin() const;
  void clear_preproc_plugin();
  static const int kPreprocPluginFieldNumber = 8;
  const ::anyq::ReqPreprocPluginConfig& preproc_plugin() const;
  ::anyq::ReqPreprocPluginConfig* mutable_preproc_plugin();
  ::anyq::ReqPreprocPluginConfig* release_preproc_plugin();
  void set_allocated_preproc_plugin(::anyq::ReqPreprocPluginConfig* preproc_plugin);

  // required .anyq.ReqPostprocPluginConfig postproc_plugin = 9;
  bool has_postproc_plugin() const;
  void clear_postproc_plugin();
  static const int kPostprocPluginFieldNumber = 9;
  const ::anyq::ReqPostprocPluginConfig& postproc_plugin() const;
  ::anyq::ReqPostprocPluginConfig* mutable_postproc_plugin();
  ::anyq::ReqPostprocPluginConfig* release_postproc_plugin();
  void set_allocated_postproc_plugin(::anyq::ReqPostprocPluginConfig* postproc_plugin);

  // optional string solr_clear_passwd = 10;
  bool has_solr_clear_passwd() const;
  void clear_solr_clear_passwd();
  static const int kSolrClearPasswdFieldNumber = 10;
  const ::std::string& solr_clear_passwd() const;
  void set_solr_clear_passwd(const ::std::string& value);
  void set_solr_clear_passwd(const char* value);
  void set_solr_clear_passwd(const char* value, size_t size);
  ::std::string* mutable_solr_clear_passwd();
  ::std::string* release_solr_clear_passwd();
  void set_allocated_solr_clear_passwd(::std::string* solr_clear_passwd);

  // @@protoc_insertion_point(class_scope:anyq.ServerConfig)
 private:
  inline void set_has_idle_timeout_sec();
  inline void clear_has_idle_timeout_sec();
  inline void set_has_max_concurrency();
  inline void clear_has_max_concurrency();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_server_conf_dir();
  inline void clear_has_server_conf_dir();
  inline void set_has_log_conf_file();
  inline void clear_has_log_conf_file();
  inline void set_has_anyq_dict_conf_dir();
  inline void clear_has_anyq_dict_conf_dir();
  inline void set_has_anyq_conf_dir();
  inline void clear_has_anyq_conf_dir();
  inline void set_has_preproc_plugin();
  inline void clear_has_preproc_plugin();
  inline void set_has_postproc_plugin();
  inline void clear_has_postproc_plugin();
  inline void set_has_solr_clear_passwd();
  inline void clear_has_solr_clear_passwd();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_conf_dir_;
  ::google::protobuf::internal::ArenaStringPtr log_conf_file_;
  ::google::protobuf::internal::ArenaStringPtr anyq_dict_conf_dir_;
  ::google::protobuf::internal::ArenaStringPtr anyq_conf_dir_;
  ::google::protobuf::internal::ArenaStringPtr solr_clear_passwd_;
  ::anyq::ReqPreprocPluginConfig* preproc_plugin_;
  ::anyq::ReqPostprocPluginConfig* postproc_plugin_;
  ::google::protobuf::int32 idle_timeout_sec_;
  ::google::protobuf::int32 max_concurrency_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_InitDefaults_anyq_2eproto_impl();
  friend void  protobuf_AddDesc_anyq_2eproto_impl();
  friend void protobuf_AssignDesc_anyq_2eproto();
  friend void protobuf_ShutdownFile_anyq_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ServerConfig> ServerConfig_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DictConfig

// required string name = 1;
inline bool DictConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DictConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DictConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DictConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DictConfig::name() const {
  // @@protoc_insertion_point(field_get:anyq.DictConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.DictConfig.name)
}
inline void DictConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.DictConfig.name)
}
inline void DictConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.DictConfig.name)
}
inline ::std::string* DictConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:anyq.DictConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DictConfig::release_name() {
  // @@protoc_insertion_point(field_release:anyq.DictConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:anyq.DictConfig.name)
}

// required string type = 2;
inline bool DictConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DictConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DictConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DictConfig::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& DictConfig::type() const {
  // @@protoc_insertion_point(field_get:anyq.DictConfig.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictConfig::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.DictConfig.type)
}
inline void DictConfig::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.DictConfig.type)
}
inline void DictConfig::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.DictConfig.type)
}
inline ::std::string* DictConfig::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:anyq.DictConfig.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DictConfig::release_type() {
  // @@protoc_insertion_point(field_release:anyq.DictConfig.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictConfig::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:anyq.DictConfig.type)
}

// required string path = 3;
inline bool DictConfig::has_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DictConfig::set_has_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DictConfig::clear_has_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DictConfig::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& DictConfig::path() const {
  // @@protoc_insertion_point(field_get:anyq.DictConfig.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictConfig::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.DictConfig.path)
}
inline void DictConfig::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.DictConfig.path)
}
inline void DictConfig::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.DictConfig.path)
}
inline ::std::string* DictConfig::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:anyq.DictConfig.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DictConfig::release_path() {
  // @@protoc_insertion_point(field_release:anyq.DictConfig.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictConfig::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:anyq.DictConfig.path)
}

// optional string blob_name = 4;
inline bool DictConfig::has_blob_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DictConfig::set_has_blob_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DictConfig::clear_has_blob_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DictConfig::clear_blob_name() {
  blob_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_blob_name();
}
inline const ::std::string& DictConfig::blob_name() const {
  // @@protoc_insertion_point(field_get:anyq.DictConfig.blob_name)
  return blob_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictConfig::set_blob_name(const ::std::string& value) {
  set_has_blob_name();
  blob_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.DictConfig.blob_name)
}
inline void DictConfig::set_blob_name(const char* value) {
  set_has_blob_name();
  blob_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.DictConfig.blob_name)
}
inline void DictConfig::set_blob_name(const char* value, size_t size) {
  set_has_blob_name();
  blob_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.DictConfig.blob_name)
}
inline ::std::string* DictConfig::mutable_blob_name() {
  set_has_blob_name();
  // @@protoc_insertion_point(field_mutable:anyq.DictConfig.blob_name)
  return blob_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DictConfig::release_blob_name() {
  // @@protoc_insertion_point(field_release:anyq.DictConfig.blob_name)
  clear_has_blob_name();
  return blob_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictConfig::set_allocated_blob_name(::std::string* blob_name) {
  if (blob_name != NULL) {
    set_has_blob_name();
  } else {
    clear_has_blob_name();
  }
  blob_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blob_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.DictConfig.blob_name)
}

// optional bool is_reload_able = 5;
inline bool DictConfig::has_is_reload_able() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DictConfig::set_has_is_reload_able() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DictConfig::clear_has_is_reload_able() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DictConfig::clear_is_reload_able() {
  is_reload_able_ = false;
  clear_has_is_reload_able();
}
inline bool DictConfig::is_reload_able() const {
  // @@protoc_insertion_point(field_get:anyq.DictConfig.is_reload_able)
  return is_reload_able_;
}
inline void DictConfig::set_is_reload_able(bool value) {
  set_has_is_reload_able();
  is_reload_able_ = value;
  // @@protoc_insertion_point(field_set:anyq.DictConfig.is_reload_able)
}

inline const DictConfig* DictConfig::internal_default_instance() {
  return &DictConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// DictManagerConfig

// required string name = 1;
inline bool DictManagerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DictManagerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DictManagerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DictManagerConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DictManagerConfig::name() const {
  // @@protoc_insertion_point(field_get:anyq.DictManagerConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictManagerConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.DictManagerConfig.name)
}
inline void DictManagerConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.DictManagerConfig.name)
}
inline void DictManagerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.DictManagerConfig.name)
}
inline ::std::string* DictManagerConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:anyq.DictManagerConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DictManagerConfig::release_name() {
  // @@protoc_insertion_point(field_release:anyq.DictManagerConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DictManagerConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:anyq.DictManagerConfig.name)
}

// repeated .anyq.DictConfig dict_config = 2;
inline int DictManagerConfig::dict_config_size() const {
  return dict_config_.size();
}
inline void DictManagerConfig::clear_dict_config() {
  dict_config_.Clear();
}
inline const ::anyq::DictConfig& DictManagerConfig::dict_config(int index) const {
  // @@protoc_insertion_point(field_get:anyq.DictManagerConfig.dict_config)
  return dict_config_.Get(index);
}
inline ::anyq::DictConfig* DictManagerConfig::mutable_dict_config(int index) {
  // @@protoc_insertion_point(field_mutable:anyq.DictManagerConfig.dict_config)
  return dict_config_.Mutable(index);
}
inline ::anyq::DictConfig* DictManagerConfig::add_dict_config() {
  // @@protoc_insertion_point(field_add:anyq.DictManagerConfig.dict_config)
  return dict_config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::anyq::DictConfig >*
DictManagerConfig::mutable_dict_config() {
  // @@protoc_insertion_point(field_mutable_list:anyq.DictManagerConfig.dict_config)
  return &dict_config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::anyq::DictConfig >&
DictManagerConfig::dict_config() const {
  // @@protoc_insertion_point(field_list:anyq.DictManagerConfig.dict_config)
  return dict_config_;
}

inline const DictManagerConfig* DictManagerConfig::internal_default_instance() {
  return &DictManagerConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// AnalysisMethodConfig

// required string name = 1;
inline bool AnalysisMethodConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnalysisMethodConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnalysisMethodConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnalysisMethodConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AnalysisMethodConfig::name() const {
  // @@protoc_insertion_point(field_get:anyq.AnalysisMethodConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.AnalysisMethodConfig.name)
}
inline void AnalysisMethodConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.AnalysisMethodConfig.name)
}
inline void AnalysisMethodConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.AnalysisMethodConfig.name)
}
inline ::std::string* AnalysisMethodConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:anyq.AnalysisMethodConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalysisMethodConfig::release_name() {
  // @@protoc_insertion_point(field_release:anyq.AnalysisMethodConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:anyq.AnalysisMethodConfig.name)
}

// required string type = 2;
inline bool AnalysisMethodConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnalysisMethodConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnalysisMethodConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnalysisMethodConfig::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& AnalysisMethodConfig::type() const {
  // @@protoc_insertion_point(field_get:anyq.AnalysisMethodConfig.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.AnalysisMethodConfig.type)
}
inline void AnalysisMethodConfig::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.AnalysisMethodConfig.type)
}
inline void AnalysisMethodConfig::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.AnalysisMethodConfig.type)
}
inline ::std::string* AnalysisMethodConfig::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:anyq.AnalysisMethodConfig.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalysisMethodConfig::release_type() {
  // @@protoc_insertion_point(field_release:anyq.AnalysisMethodConfig.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:anyq.AnalysisMethodConfig.type)
}

// required string using_dict_name = 3;
inline bool AnalysisMethodConfig::has_using_dict_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnalysisMethodConfig::set_has_using_dict_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnalysisMethodConfig::clear_has_using_dict_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnalysisMethodConfig::clear_using_dict_name() {
  using_dict_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_using_dict_name();
}
inline const ::std::string& AnalysisMethodConfig::using_dict_name() const {
  // @@protoc_insertion_point(field_get:anyq.AnalysisMethodConfig.using_dict_name)
  return using_dict_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_using_dict_name(const ::std::string& value) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.AnalysisMethodConfig.using_dict_name)
}
inline void AnalysisMethodConfig::set_using_dict_name(const char* value) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.AnalysisMethodConfig.using_dict_name)
}
inline void AnalysisMethodConfig::set_using_dict_name(const char* value, size_t size) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.AnalysisMethodConfig.using_dict_name)
}
inline ::std::string* AnalysisMethodConfig::mutable_using_dict_name() {
  set_has_using_dict_name();
  // @@protoc_insertion_point(field_mutable:anyq.AnalysisMethodConfig.using_dict_name)
  return using_dict_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalysisMethodConfig::release_using_dict_name() {
  // @@protoc_insertion_point(field_release:anyq.AnalysisMethodConfig.using_dict_name)
  clear_has_using_dict_name();
  return using_dict_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_allocated_using_dict_name(::std::string* using_dict_name) {
  if (using_dict_name != NULL) {
    set_has_using_dict_name();
  } else {
    clear_has_using_dict_name();
  }
  using_dict_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), using_dict_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.AnalysisMethodConfig.using_dict_name)
}

// optional bool need_phrase_seg = 4;
inline bool AnalysisMethodConfig::has_need_phrase_seg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnalysisMethodConfig::set_has_need_phrase_seg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnalysisMethodConfig::clear_has_need_phrase_seg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnalysisMethodConfig::clear_need_phrase_seg() {
  need_phrase_seg_ = false;
  clear_has_need_phrase_seg();
}
inline bool AnalysisMethodConfig::need_phrase_seg() const {
  // @@protoc_insertion_point(field_get:anyq.AnalysisMethodConfig.need_phrase_seg)
  return need_phrase_seg_;
}
inline void AnalysisMethodConfig::set_need_phrase_seg(bool value) {
  set_has_need_phrase_seg();
  need_phrase_seg_ = value;
  // @@protoc_insertion_point(field_set:anyq.AnalysisMethodConfig.need_phrase_seg)
}

// optional string query_feed_name = 5;
inline bool AnalysisMethodConfig::has_query_feed_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AnalysisMethodConfig::set_has_query_feed_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AnalysisMethodConfig::clear_has_query_feed_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AnalysisMethodConfig::clear_query_feed_name() {
  query_feed_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_feed_name();
}
inline const ::std::string& AnalysisMethodConfig::query_feed_name() const {
  // @@protoc_insertion_point(field_get:anyq.AnalysisMethodConfig.query_feed_name)
  return query_feed_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_query_feed_name(const ::std::string& value) {
  set_has_query_feed_name();
  query_feed_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.AnalysisMethodConfig.query_feed_name)
}
inline void AnalysisMethodConfig::set_query_feed_name(const char* value) {
  set_has_query_feed_name();
  query_feed_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.AnalysisMethodConfig.query_feed_name)
}
inline void AnalysisMethodConfig::set_query_feed_name(const char* value, size_t size) {
  set_has_query_feed_name();
  query_feed_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.AnalysisMethodConfig.query_feed_name)
}
inline ::std::string* AnalysisMethodConfig::mutable_query_feed_name() {
  set_has_query_feed_name();
  // @@protoc_insertion_point(field_mutable:anyq.AnalysisMethodConfig.query_feed_name)
  return query_feed_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalysisMethodConfig::release_query_feed_name() {
  // @@protoc_insertion_point(field_release:anyq.AnalysisMethodConfig.query_feed_name)
  clear_has_query_feed_name();
  return query_feed_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_allocated_query_feed_name(::std::string* query_feed_name) {
  if (query_feed_name != NULL) {
    set_has_query_feed_name();
  } else {
    clear_has_query_feed_name();
  }
  query_feed_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_feed_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.AnalysisMethodConfig.query_feed_name)
}

// optional string cand_feed_name = 6;
inline bool AnalysisMethodConfig::has_cand_feed_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AnalysisMethodConfig::set_has_cand_feed_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AnalysisMethodConfig::clear_has_cand_feed_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AnalysisMethodConfig::clear_cand_feed_name() {
  cand_feed_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cand_feed_name();
}
inline const ::std::string& AnalysisMethodConfig::cand_feed_name() const {
  // @@protoc_insertion_point(field_get:anyq.AnalysisMethodConfig.cand_feed_name)
  return cand_feed_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_cand_feed_name(const ::std::string& value) {
  set_has_cand_feed_name();
  cand_feed_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.AnalysisMethodConfig.cand_feed_name)
}
inline void AnalysisMethodConfig::set_cand_feed_name(const char* value) {
  set_has_cand_feed_name();
  cand_feed_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.AnalysisMethodConfig.cand_feed_name)
}
inline void AnalysisMethodConfig::set_cand_feed_name(const char* value, size_t size) {
  set_has_cand_feed_name();
  cand_feed_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.AnalysisMethodConfig.cand_feed_name)
}
inline ::std::string* AnalysisMethodConfig::mutable_cand_feed_name() {
  set_has_cand_feed_name();
  // @@protoc_insertion_point(field_mutable:anyq.AnalysisMethodConfig.cand_feed_name)
  return cand_feed_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalysisMethodConfig::release_cand_feed_name() {
  // @@protoc_insertion_point(field_release:anyq.AnalysisMethodConfig.cand_feed_name)
  clear_has_cand_feed_name();
  return cand_feed_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_allocated_cand_feed_name(::std::string* cand_feed_name) {
  if (cand_feed_name != NULL) {
    set_has_cand_feed_name();
  } else {
    clear_has_cand_feed_name();
  }
  cand_feed_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cand_feed_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.AnalysisMethodConfig.cand_feed_name)
}

// optional string embedding_fetch_name = 7;
inline bool AnalysisMethodConfig::has_embedding_fetch_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AnalysisMethodConfig::set_has_embedding_fetch_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AnalysisMethodConfig::clear_has_embedding_fetch_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AnalysisMethodConfig::clear_embedding_fetch_name() {
  embedding_fetch_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_embedding_fetch_name();
}
inline const ::std::string& AnalysisMethodConfig::embedding_fetch_name() const {
  // @@protoc_insertion_point(field_get:anyq.AnalysisMethodConfig.embedding_fetch_name)
  return embedding_fetch_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_embedding_fetch_name(const ::std::string& value) {
  set_has_embedding_fetch_name();
  embedding_fetch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.AnalysisMethodConfig.embedding_fetch_name)
}
inline void AnalysisMethodConfig::set_embedding_fetch_name(const char* value) {
  set_has_embedding_fetch_name();
  embedding_fetch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.AnalysisMethodConfig.embedding_fetch_name)
}
inline void AnalysisMethodConfig::set_embedding_fetch_name(const char* value, size_t size) {
  set_has_embedding_fetch_name();
  embedding_fetch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.AnalysisMethodConfig.embedding_fetch_name)
}
inline ::std::string* AnalysisMethodConfig::mutable_embedding_fetch_name() {
  set_has_embedding_fetch_name();
  // @@protoc_insertion_point(field_mutable:anyq.AnalysisMethodConfig.embedding_fetch_name)
  return embedding_fetch_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalysisMethodConfig::release_embedding_fetch_name() {
  // @@protoc_insertion_point(field_release:anyq.AnalysisMethodConfig.embedding_fetch_name)
  clear_has_embedding_fetch_name();
  return embedding_fetch_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisMethodConfig::set_allocated_embedding_fetch_name(::std::string* embedding_fetch_name) {
  if (embedding_fetch_name != NULL) {
    set_has_embedding_fetch_name();
  } else {
    clear_has_embedding_fetch_name();
  }
  embedding_fetch_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), embedding_fetch_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.AnalysisMethodConfig.embedding_fetch_name)
}

// optional uint32 dim = 8;
inline bool AnalysisMethodConfig::has_dim() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AnalysisMethodConfig::set_has_dim() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AnalysisMethodConfig::clear_has_dim() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AnalysisMethodConfig::clear_dim() {
  dim_ = 0u;
  clear_has_dim();
}
inline ::google::protobuf::uint32 AnalysisMethodConfig::dim() const {
  // @@protoc_insertion_point(field_get:anyq.AnalysisMethodConfig.dim)
  return dim_;
}
inline void AnalysisMethodConfig::set_dim(::google::protobuf::uint32 value) {
  set_has_dim();
  dim_ = value;
  // @@protoc_insertion_point(field_set:anyq.AnalysisMethodConfig.dim)
}

inline const AnalysisMethodConfig* AnalysisMethodConfig::internal_default_instance() {
  return &AnalysisMethodConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// AnalysisConfig

// optional string name = 1;
inline bool AnalysisConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnalysisConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnalysisConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnalysisConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AnalysisConfig::name() const {
  // @@protoc_insertion_point(field_get:anyq.AnalysisConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.AnalysisConfig.name)
}
inline void AnalysisConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.AnalysisConfig.name)
}
inline void AnalysisConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.AnalysisConfig.name)
}
inline ::std::string* AnalysisConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:anyq.AnalysisConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalysisConfig::release_name() {
  // @@protoc_insertion_point(field_release:anyq.AnalysisConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:anyq.AnalysisConfig.name)
}

// optional string hide_tag = 2;
inline bool AnalysisConfig::has_hide_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnalysisConfig::set_has_hide_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnalysisConfig::clear_has_hide_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnalysisConfig::clear_hide_tag() {
  hide_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hide_tag();
}
inline const ::std::string& AnalysisConfig::hide_tag() const {
  // @@protoc_insertion_point(field_get:anyq.AnalysisConfig.hide_tag)
  return hide_tag_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisConfig::set_hide_tag(const ::std::string& value) {
  set_has_hide_tag();
  hide_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.AnalysisConfig.hide_tag)
}
inline void AnalysisConfig::set_hide_tag(const char* value) {
  set_has_hide_tag();
  hide_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.AnalysisConfig.hide_tag)
}
inline void AnalysisConfig::set_hide_tag(const char* value, size_t size) {
  set_has_hide_tag();
  hide_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.AnalysisConfig.hide_tag)
}
inline ::std::string* AnalysisConfig::mutable_hide_tag() {
  set_has_hide_tag();
  // @@protoc_insertion_point(field_mutable:anyq.AnalysisConfig.hide_tag)
  return hide_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnalysisConfig::release_hide_tag() {
  // @@protoc_insertion_point(field_release:anyq.AnalysisConfig.hide_tag)
  clear_has_hide_tag();
  return hide_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnalysisConfig::set_allocated_hide_tag(::std::string* hide_tag) {
  if (hide_tag != NULL) {
    set_has_hide_tag();
  } else {
    clear_has_hide_tag();
  }
  hide_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hide_tag);
  // @@protoc_insertion_point(field_set_allocated:anyq.AnalysisConfig.hide_tag)
}

// repeated .anyq.AnalysisMethodConfig analysis_method = 3;
inline int AnalysisConfig::analysis_method_size() const {
  return analysis_method_.size();
}
inline void AnalysisConfig::clear_analysis_method() {
  analysis_method_.Clear();
}
inline const ::anyq::AnalysisMethodConfig& AnalysisConfig::analysis_method(int index) const {
  // @@protoc_insertion_point(field_get:anyq.AnalysisConfig.analysis_method)
  return analysis_method_.Get(index);
}
inline ::anyq::AnalysisMethodConfig* AnalysisConfig::mutable_analysis_method(int index) {
  // @@protoc_insertion_point(field_mutable:anyq.AnalysisConfig.analysis_method)
  return analysis_method_.Mutable(index);
}
inline ::anyq::AnalysisMethodConfig* AnalysisConfig::add_analysis_method() {
  // @@protoc_insertion_point(field_add:anyq.AnalysisConfig.analysis_method)
  return analysis_method_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::anyq::AnalysisMethodConfig >*
AnalysisConfig::mutable_analysis_method() {
  // @@protoc_insertion_point(field_mutable_list:anyq.AnalysisConfig.analysis_method)
  return &analysis_method_;
}
inline const ::google::protobuf::RepeatedPtrField< ::anyq::AnalysisMethodConfig >&
AnalysisConfig::analysis_method() const {
  // @@protoc_insertion_point(field_list:anyq.AnalysisConfig.analysis_method)
  return analysis_method_;
}

inline const AnalysisConfig* AnalysisConfig::internal_default_instance() {
  return &AnalysisConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// SolrQConfig

// required string type = 1;
inline bool SolrQConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SolrQConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SolrQConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SolrQConfig::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& SolrQConfig::type() const {
  // @@protoc_insertion_point(field_get:anyq.SolrQConfig.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolrQConfig::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.SolrQConfig.type)
}
inline void SolrQConfig::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.SolrQConfig.type)
}
inline void SolrQConfig::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.SolrQConfig.type)
}
inline ::std::string* SolrQConfig::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:anyq.SolrQConfig.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolrQConfig::release_type() {
  // @@protoc_insertion_point(field_release:anyq.SolrQConfig.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolrQConfig::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:anyq.SolrQConfig.type)
}

// required string name = 2;
inline bool SolrQConfig::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SolrQConfig::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SolrQConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SolrQConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SolrQConfig::name() const {
  // @@protoc_insertion_point(field_get:anyq.SolrQConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolrQConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.SolrQConfig.name)
}
inline void SolrQConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.SolrQConfig.name)
}
inline void SolrQConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.SolrQConfig.name)
}
inline ::std::string* SolrQConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:anyq.SolrQConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolrQConfig::release_name() {
  // @@protoc_insertion_point(field_release:anyq.SolrQConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolrQConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:anyq.SolrQConfig.name)
}

// required string solr_field = 3;
inline bool SolrQConfig::has_solr_field() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SolrQConfig::set_has_solr_field() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SolrQConfig::clear_has_solr_field() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SolrQConfig::clear_solr_field() {
  solr_field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_solr_field();
}
inline const ::std::string& SolrQConfig::solr_field() const {
  // @@protoc_insertion_point(field_get:anyq.SolrQConfig.solr_field)
  return solr_field_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolrQConfig::set_solr_field(const ::std::string& value) {
  set_has_solr_field();
  solr_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.SolrQConfig.solr_field)
}
inline void SolrQConfig::set_solr_field(const char* value) {
  set_has_solr_field();
  solr_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.SolrQConfig.solr_field)
}
inline void SolrQConfig::set_solr_field(const char* value, size_t size) {
  set_has_solr_field();
  solr_field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.SolrQConfig.solr_field)
}
inline ::std::string* SolrQConfig::mutable_solr_field() {
  set_has_solr_field();
  // @@protoc_insertion_point(field_mutable:anyq.SolrQConfig.solr_field)
  return solr_field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolrQConfig::release_solr_field() {
  // @@protoc_insertion_point(field_release:anyq.SolrQConfig.solr_field)
  clear_has_solr_field();
  return solr_field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolrQConfig::set_allocated_solr_field(::std::string* solr_field) {
  if (solr_field != NULL) {
    set_has_solr_field();
  } else {
    clear_has_solr_field();
  }
  solr_field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), solr_field);
  // @@protoc_insertion_point(field_set_allocated:anyq.SolrQConfig.solr_field)
}

// required string source_name = 4;
inline bool SolrQConfig::has_source_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SolrQConfig::set_has_source_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SolrQConfig::clear_has_source_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SolrQConfig::clear_source_name() {
  source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_name();
}
inline const ::std::string& SolrQConfig::source_name() const {
  // @@protoc_insertion_point(field_get:anyq.SolrQConfig.source_name)
  return source_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolrQConfig::set_source_name(const ::std::string& value) {
  set_has_source_name();
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.SolrQConfig.source_name)
}
inline void SolrQConfig::set_source_name(const char* value) {
  set_has_source_name();
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.SolrQConfig.source_name)
}
inline void SolrQConfig::set_source_name(const char* value, size_t size) {
  set_has_source_name();
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.SolrQConfig.source_name)
}
inline ::std::string* SolrQConfig::mutable_source_name() {
  set_has_source_name();
  // @@protoc_insertion_point(field_mutable:anyq.SolrQConfig.source_name)
  return source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolrQConfig::release_source_name() {
  // @@protoc_insertion_point(field_release:anyq.SolrQConfig.source_name)
  clear_has_source_name();
  return source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolrQConfig::set_allocated_source_name(::std::string* source_name) {
  if (source_name != NULL) {
    set_has_source_name();
  } else {
    clear_has_source_name();
  }
  source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.SolrQConfig.source_name)
}

// optional string weight_dict = 5;
inline bool SolrQConfig::has_weight_dict() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SolrQConfig::set_has_weight_dict() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SolrQConfig::clear_has_weight_dict() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SolrQConfig::clear_weight_dict() {
  weight_dict_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_weight_dict();
}
inline const ::std::string& SolrQConfig::weight_dict() const {
  // @@protoc_insertion_point(field_get:anyq.SolrQConfig.weight_dict)
  return weight_dict_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolrQConfig::set_weight_dict(const ::std::string& value) {
  set_has_weight_dict();
  weight_dict_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.SolrQConfig.weight_dict)
}
inline void SolrQConfig::set_weight_dict(const char* value) {
  set_has_weight_dict();
  weight_dict_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.SolrQConfig.weight_dict)
}
inline void SolrQConfig::set_weight_dict(const char* value, size_t size) {
  set_has_weight_dict();
  weight_dict_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.SolrQConfig.weight_dict)
}
inline ::std::string* SolrQConfig::mutable_weight_dict() {
  set_has_weight_dict();
  // @@protoc_insertion_point(field_mutable:anyq.SolrQConfig.weight_dict)
  return weight_dict_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolrQConfig::release_weight_dict() {
  // @@protoc_insertion_point(field_release:anyq.SolrQConfig.weight_dict)
  clear_has_weight_dict();
  return weight_dict_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolrQConfig::set_allocated_weight_dict(::std::string* weight_dict) {
  if (weight_dict != NULL) {
    set_has_weight_dict();
  } else {
    clear_has_weight_dict();
  }
  weight_dict_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), weight_dict);
  // @@protoc_insertion_point(field_set_allocated:anyq.SolrQConfig.weight_dict)
}

// optional string compare_type = 6;
inline bool SolrQConfig::has_compare_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SolrQConfig::set_has_compare_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SolrQConfig::clear_has_compare_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SolrQConfig::clear_compare_type() {
  compare_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_compare_type();
}
inline const ::std::string& SolrQConfig::compare_type() const {
  // @@protoc_insertion_point(field_get:anyq.SolrQConfig.compare_type)
  return compare_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolrQConfig::set_compare_type(const ::std::string& value) {
  set_has_compare_type();
  compare_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.SolrQConfig.compare_type)
}
inline void SolrQConfig::set_compare_type(const char* value) {
  set_has_compare_type();
  compare_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.SolrQConfig.compare_type)
}
inline void SolrQConfig::set_compare_type(const char* value, size_t size) {
  set_has_compare_type();
  compare_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.SolrQConfig.compare_type)
}
inline ::std::string* SolrQConfig::mutable_compare_type() {
  set_has_compare_type();
  // @@protoc_insertion_point(field_mutable:anyq.SolrQConfig.compare_type)
  return compare_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SolrQConfig::release_compare_type() {
  // @@protoc_insertion_point(field_release:anyq.SolrQConfig.compare_type)
  clear_has_compare_type();
  return compare_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SolrQConfig::set_allocated_compare_type(::std::string* compare_type) {
  if (compare_type != NULL) {
    set_has_compare_type();
  } else {
    clear_has_compare_type();
  }
  compare_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compare_type);
  // @@protoc_insertion_point(field_set_allocated:anyq.SolrQConfig.compare_type)
}

inline const SolrQConfig* SolrQConfig::internal_default_instance() {
  return &SolrQConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// RetrievalPluginConfig

// required string type = 1;
inline bool RetrievalPluginConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetrievalPluginConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetrievalPluginConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetrievalPluginConfig::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& RetrievalPluginConfig::type() const {
  // @@protoc_insertion_point(field_get:anyq.RetrievalPluginConfig.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetrievalPluginConfig::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.RetrievalPluginConfig.type)
}
inline void RetrievalPluginConfig::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.RetrievalPluginConfig.type)
}
inline void RetrievalPluginConfig::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.RetrievalPluginConfig.type)
}
inline ::std::string* RetrievalPluginConfig::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:anyq.RetrievalPluginConfig.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RetrievalPluginConfig::release_type() {
  // @@protoc_insertion_point(field_release:anyq.RetrievalPluginConfig.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetrievalPluginConfig::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:anyq.RetrievalPluginConfig.type)
}

// required string name = 2;
inline bool RetrievalPluginConfig::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RetrievalPluginConfig::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RetrievalPluginConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RetrievalPluginConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& RetrievalPluginConfig::name() const {
  // @@protoc_insertion_point(field_get:anyq.RetrievalPluginConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetrievalPluginConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.RetrievalPluginConfig.name)
}
inline void RetrievalPluginConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.RetrievalPluginConfig.name)
}
inline void RetrievalPluginConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.RetrievalPluginConfig.name)
}
inline ::std::string* RetrievalPluginConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:anyq.RetrievalPluginConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RetrievalPluginConfig::release_name() {
  // @@protoc_insertion_point(field_release:anyq.RetrievalPluginConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetrievalPluginConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:anyq.RetrievalPluginConfig.name)
}

// required uint32 num_result = 3;
inline bool RetrievalPluginConfig::has_num_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RetrievalPluginConfig::set_has_num_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RetrievalPluginConfig::clear_has_num_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RetrievalPluginConfig::clear_num_result() {
  num_result_ = 0u;
  clear_has_num_result();
}
inline ::google::protobuf::uint32 RetrievalPluginConfig::num_result() const {
  // @@protoc_insertion_point(field_get:anyq.RetrievalPluginConfig.num_result)
  return num_result_;
}
inline void RetrievalPluginConfig::set_num_result(::google::protobuf::uint32 value) {
  set_has_num_result();
  num_result_ = value;
  // @@protoc_insertion_point(field_set:anyq.RetrievalPluginConfig.num_result)
}

// optional string search_host = 4;
inline bool RetrievalPluginConfig::has_search_host() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RetrievalPluginConfig::set_has_search_host() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RetrievalPluginConfig::clear_has_search_host() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RetrievalPluginConfig::clear_search_host() {
  search_host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_host();
}
inline const ::std::string& RetrievalPluginConfig::search_host() const {
  // @@protoc_insertion_point(field_get:anyq.RetrievalPluginConfig.search_host)
  return search_host_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetrievalPluginConfig::set_search_host(const ::std::string& value) {
  set_has_search_host();
  search_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.RetrievalPluginConfig.search_host)
}
inline void RetrievalPluginConfig::set_search_host(const char* value) {
  set_has_search_host();
  search_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.RetrievalPluginConfig.search_host)
}
inline void RetrievalPluginConfig::set_search_host(const char* value, size_t size) {
  set_has_search_host();
  search_host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.RetrievalPluginConfig.search_host)
}
inline ::std::string* RetrievalPluginConfig::mutable_search_host() {
  set_has_search_host();
  // @@protoc_insertion_point(field_mutable:anyq.RetrievalPluginConfig.search_host)
  return search_host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RetrievalPluginConfig::release_search_host() {
  // @@protoc_insertion_point(field_release:anyq.RetrievalPluginConfig.search_host)
  clear_has_search_host();
  return search_host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetrievalPluginConfig::set_allocated_search_host(::std::string* search_host) {
  if (search_host != NULL) {
    set_has_search_host();
  } else {
    clear_has_search_host();
  }
  search_host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_host);
  // @@protoc_insertion_point(field_set_allocated:anyq.RetrievalPluginConfig.search_host)
}

// optional uint32 search_port = 5;
inline bool RetrievalPluginConfig::has_search_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RetrievalPluginConfig::set_has_search_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RetrievalPluginConfig::clear_has_search_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RetrievalPluginConfig::clear_search_port() {
  search_port_ = 0u;
  clear_has_search_port();
}
inline ::google::protobuf::uint32 RetrievalPluginConfig::search_port() const {
  // @@protoc_insertion_point(field_get:anyq.RetrievalPluginConfig.search_port)
  return search_port_;
}
inline void RetrievalPluginConfig::set_search_port(::google::protobuf::uint32 value) {
  set_has_search_port();
  search_port_ = value;
  // @@protoc_insertion_point(field_set:anyq.RetrievalPluginConfig.search_port)
}

// optional string engine_name = 6;
inline bool RetrievalPluginConfig::has_engine_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RetrievalPluginConfig::set_has_engine_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RetrievalPluginConfig::clear_has_engine_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RetrievalPluginConfig::clear_engine_name() {
  engine_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_engine_name();
}
inline const ::std::string& RetrievalPluginConfig::engine_name() const {
  // @@protoc_insertion_point(field_get:anyq.RetrievalPluginConfig.engine_name)
  return engine_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetrievalPluginConfig::set_engine_name(const ::std::string& value) {
  set_has_engine_name();
  engine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.RetrievalPluginConfig.engine_name)
}
inline void RetrievalPluginConfig::set_engine_name(const char* value) {
  set_has_engine_name();
  engine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.RetrievalPluginConfig.engine_name)
}
inline void RetrievalPluginConfig::set_engine_name(const char* value, size_t size) {
  set_has_engine_name();
  engine_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.RetrievalPluginConfig.engine_name)
}
inline ::std::string* RetrievalPluginConfig::mutable_engine_name() {
  set_has_engine_name();
  // @@protoc_insertion_point(field_mutable:anyq.RetrievalPluginConfig.engine_name)
  return engine_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RetrievalPluginConfig::release_engine_name() {
  // @@protoc_insertion_point(field_release:anyq.RetrievalPluginConfig.engine_name)
  clear_has_engine_name();
  return engine_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetrievalPluginConfig::set_allocated_engine_name(::std::string* engine_name) {
  if (engine_name != NULL) {
    set_has_engine_name();
  } else {
    clear_has_engine_name();
  }
  engine_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), engine_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.RetrievalPluginConfig.engine_name)
}

// optional string solr_result_fl = 7;
inline bool RetrievalPluginConfig::has_solr_result_fl() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RetrievalPluginConfig::set_has_solr_result_fl() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RetrievalPluginConfig::clear_has_solr_result_fl() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RetrievalPluginConfig::clear_solr_result_fl() {
  solr_result_fl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_solr_result_fl();
}
inline const ::std::string& RetrievalPluginConfig::solr_result_fl() const {
  // @@protoc_insertion_point(field_get:anyq.RetrievalPluginConfig.solr_result_fl)
  return solr_result_fl_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetrievalPluginConfig::set_solr_result_fl(const ::std::string& value) {
  set_has_solr_result_fl();
  solr_result_fl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.RetrievalPluginConfig.solr_result_fl)
}
inline void RetrievalPluginConfig::set_solr_result_fl(const char* value) {
  set_has_solr_result_fl();
  solr_result_fl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.RetrievalPluginConfig.solr_result_fl)
}
inline void RetrievalPluginConfig::set_solr_result_fl(const char* value, size_t size) {
  set_has_solr_result_fl();
  solr_result_fl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.RetrievalPluginConfig.solr_result_fl)
}
inline ::std::string* RetrievalPluginConfig::mutable_solr_result_fl() {
  set_has_solr_result_fl();
  // @@protoc_insertion_point(field_mutable:anyq.RetrievalPluginConfig.solr_result_fl)
  return solr_result_fl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RetrievalPluginConfig::release_solr_result_fl() {
  // @@protoc_insertion_point(field_release:anyq.RetrievalPluginConfig.solr_result_fl)
  clear_has_solr_result_fl();
  return solr_result_fl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetrievalPluginConfig::set_allocated_solr_result_fl(::std::string* solr_result_fl) {
  if (solr_result_fl != NULL) {
    set_has_solr_result_fl();
  } else {
    clear_has_solr_result_fl();
  }
  solr_result_fl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), solr_result_fl);
  // @@protoc_insertion_point(field_set_allocated:anyq.RetrievalPluginConfig.solr_result_fl)
}

// repeated .anyq.SolrQConfig solr_q = 8;
inline int RetrievalPluginConfig::solr_q_size() const {
  return solr_q_.size();
}
inline void RetrievalPluginConfig::clear_solr_q() {
  solr_q_.Clear();
}
inline const ::anyq::SolrQConfig& RetrievalPluginConfig::solr_q(int index) const {
  // @@protoc_insertion_point(field_get:anyq.RetrievalPluginConfig.solr_q)
  return solr_q_.Get(index);
}
inline ::anyq::SolrQConfig* RetrievalPluginConfig::mutable_solr_q(int index) {
  // @@protoc_insertion_point(field_mutable:anyq.RetrievalPluginConfig.solr_q)
  return solr_q_.Mutable(index);
}
inline ::anyq::SolrQConfig* RetrievalPluginConfig::add_solr_q() {
  // @@protoc_insertion_point(field_add:anyq.RetrievalPluginConfig.solr_q)
  return solr_q_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::anyq::SolrQConfig >*
RetrievalPluginConfig::mutable_solr_q() {
  // @@protoc_insertion_point(field_mutable_list:anyq.RetrievalPluginConfig.solr_q)
  return &solr_q_;
}
inline const ::google::protobuf::RepeatedPtrField< ::anyq::SolrQConfig >&
RetrievalPluginConfig::solr_q() const {
  // @@protoc_insertion_point(field_list:anyq.RetrievalPluginConfig.solr_q)
  return solr_q_;
}

// optional uint32 vector_size = 9;
inline bool RetrievalPluginConfig::has_vector_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RetrievalPluginConfig::set_has_vector_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RetrievalPluginConfig::clear_has_vector_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RetrievalPluginConfig::clear_vector_size() {
  vector_size_ = 0u;
  clear_has_vector_size();
}
inline ::google::protobuf::uint32 RetrievalPluginConfig::vector_size() const {
  // @@protoc_insertion_point(field_get:anyq.RetrievalPluginConfig.vector_size)
  return vector_size_;
}
inline void RetrievalPluginConfig::set_vector_size(::google::protobuf::uint32 value) {
  set_has_vector_size();
  vector_size_ = value;
  // @@protoc_insertion_point(field_set:anyq.RetrievalPluginConfig.vector_size)
}

// optional uint32 search_k = 10;
inline bool RetrievalPluginConfig::has_search_k() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RetrievalPluginConfig::set_has_search_k() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RetrievalPluginConfig::clear_has_search_k() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RetrievalPluginConfig::clear_search_k() {
  search_k_ = 0u;
  clear_has_search_k();
}
inline ::google::protobuf::uint32 RetrievalPluginConfig::search_k() const {
  // @@protoc_insertion_point(field_get:anyq.RetrievalPluginConfig.search_k)
  return search_k_;
}
inline void RetrievalPluginConfig::set_search_k(::google::protobuf::uint32 value) {
  set_has_search_k();
  search_k_ = value;
  // @@protoc_insertion_point(field_set:anyq.RetrievalPluginConfig.search_k)
}

// optional string index_path = 11;
inline bool RetrievalPluginConfig::has_index_path() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RetrievalPluginConfig::set_has_index_path() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RetrievalPluginConfig::clear_has_index_path() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RetrievalPluginConfig::clear_index_path() {
  index_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_index_path();
}
inline const ::std::string& RetrievalPluginConfig::index_path() const {
  // @@protoc_insertion_point(field_get:anyq.RetrievalPluginConfig.index_path)
  return index_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetrievalPluginConfig::set_index_path(const ::std::string& value) {
  set_has_index_path();
  index_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.RetrievalPluginConfig.index_path)
}
inline void RetrievalPluginConfig::set_index_path(const char* value) {
  set_has_index_path();
  index_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.RetrievalPluginConfig.index_path)
}
inline void RetrievalPluginConfig::set_index_path(const char* value, size_t size) {
  set_has_index_path();
  index_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.RetrievalPluginConfig.index_path)
}
inline ::std::string* RetrievalPluginConfig::mutable_index_path() {
  set_has_index_path();
  // @@protoc_insertion_point(field_mutable:anyq.RetrievalPluginConfig.index_path)
  return index_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RetrievalPluginConfig::release_index_path() {
  // @@protoc_insertion_point(field_release:anyq.RetrievalPluginConfig.index_path)
  clear_has_index_path();
  return index_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetrievalPluginConfig::set_allocated_index_path(::std::string* index_path) {
  if (index_path != NULL) {
    set_has_index_path();
  } else {
    clear_has_index_path();
  }
  index_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_path);
  // @@protoc_insertion_point(field_set_allocated:anyq.RetrievalPluginConfig.index_path)
}

// optional string using_dict_name = 12;
inline bool RetrievalPluginConfig::has_using_dict_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RetrievalPluginConfig::set_has_using_dict_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RetrievalPluginConfig::clear_has_using_dict_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RetrievalPluginConfig::clear_using_dict_name() {
  using_dict_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_using_dict_name();
}
inline const ::std::string& RetrievalPluginConfig::using_dict_name() const {
  // @@protoc_insertion_point(field_get:anyq.RetrievalPluginConfig.using_dict_name)
  return using_dict_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetrievalPluginConfig::set_using_dict_name(const ::std::string& value) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.RetrievalPluginConfig.using_dict_name)
}
inline void RetrievalPluginConfig::set_using_dict_name(const char* value) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.RetrievalPluginConfig.using_dict_name)
}
inline void RetrievalPluginConfig::set_using_dict_name(const char* value, size_t size) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.RetrievalPluginConfig.using_dict_name)
}
inline ::std::string* RetrievalPluginConfig::mutable_using_dict_name() {
  set_has_using_dict_name();
  // @@protoc_insertion_point(field_mutable:anyq.RetrievalPluginConfig.using_dict_name)
  return using_dict_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RetrievalPluginConfig::release_using_dict_name() {
  // @@protoc_insertion_point(field_release:anyq.RetrievalPluginConfig.using_dict_name)
  clear_has_using_dict_name();
  return using_dict_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetrievalPluginConfig::set_allocated_using_dict_name(::std::string* using_dict_name) {
  if (using_dict_name != NULL) {
    set_has_using_dict_name();
  } else {
    clear_has_using_dict_name();
  }
  using_dict_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), using_dict_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.RetrievalPluginConfig.using_dict_name)
}

// optional string type_name = 14;
inline bool RetrievalPluginConfig::has_type_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RetrievalPluginConfig::set_has_type_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RetrievalPluginConfig::clear_has_type_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RetrievalPluginConfig::clear_type_name() {
  type_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type_name();
}
inline const ::std::string& RetrievalPluginConfig::type_name() const {
  // @@protoc_insertion_point(field_get:anyq.RetrievalPluginConfig.type_name)
  return type_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetrievalPluginConfig::set_type_name(const ::std::string& value) {
  set_has_type_name();
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.RetrievalPluginConfig.type_name)
}
inline void RetrievalPluginConfig::set_type_name(const char* value) {
  set_has_type_name();
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.RetrievalPluginConfig.type_name)
}
inline void RetrievalPluginConfig::set_type_name(const char* value, size_t size) {
  set_has_type_name();
  type_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.RetrievalPluginConfig.type_name)
}
inline ::std::string* RetrievalPluginConfig::mutable_type_name() {
  set_has_type_name();
  // @@protoc_insertion_point(field_mutable:anyq.RetrievalPluginConfig.type_name)
  return type_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RetrievalPluginConfig::release_type_name() {
  // @@protoc_insertion_point(field_release:anyq.RetrievalPluginConfig.type_name)
  clear_has_type_name();
  return type_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RetrievalPluginConfig::set_allocated_type_name(::std::string* type_name) {
  if (type_name != NULL) {
    set_has_type_name();
  } else {
    clear_has_type_name();
  }
  type_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.RetrievalPluginConfig.type_name)
}

inline const RetrievalPluginConfig* RetrievalPluginConfig::internal_default_instance() {
  return &RetrievalPluginConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// RetrievalConfig

// repeated .anyq.RetrievalPluginConfig retrieval_plugin = 1;
inline int RetrievalConfig::retrieval_plugin_size() const {
  return retrieval_plugin_.size();
}
inline void RetrievalConfig::clear_retrieval_plugin() {
  retrieval_plugin_.Clear();
}
inline const ::anyq::RetrievalPluginConfig& RetrievalConfig::retrieval_plugin(int index) const {
  // @@protoc_insertion_point(field_get:anyq.RetrievalConfig.retrieval_plugin)
  return retrieval_plugin_.Get(index);
}
inline ::anyq::RetrievalPluginConfig* RetrievalConfig::mutable_retrieval_plugin(int index) {
  // @@protoc_insertion_point(field_mutable:anyq.RetrievalConfig.retrieval_plugin)
  return retrieval_plugin_.Mutable(index);
}
inline ::anyq::RetrievalPluginConfig* RetrievalConfig::add_retrieval_plugin() {
  // @@protoc_insertion_point(field_add:anyq.RetrievalConfig.retrieval_plugin)
  return retrieval_plugin_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::anyq::RetrievalPluginConfig >*
RetrievalConfig::mutable_retrieval_plugin() {
  // @@protoc_insertion_point(field_mutable_list:anyq.RetrievalConfig.retrieval_plugin)
  return &retrieval_plugin_;
}
inline const ::google::protobuf::RepeatedPtrField< ::anyq::RetrievalPluginConfig >&
RetrievalConfig::retrieval_plugin() const {
  // @@protoc_insertion_point(field_list:anyq.RetrievalConfig.retrieval_plugin)
  return retrieval_plugin_;
}

inline const RetrievalConfig* RetrievalConfig::internal_default_instance() {
  return &RetrievalConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// SelectConfig

// optional int32 select_index = 1;
inline bool SelectConfig::has_select_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectConfig::set_has_select_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelectConfig::clear_has_select_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelectConfig::clear_select_index() {
  select_index_ = 0;
  clear_has_select_index();
}
inline ::google::protobuf::int32 SelectConfig::select_index() const {
  // @@protoc_insertion_point(field_get:anyq.SelectConfig.select_index)
  return select_index_;
}
inline void SelectConfig::set_select_index(::google::protobuf::int32 value) {
  set_has_select_index();
  select_index_ = value;
  // @@protoc_insertion_point(field_set:anyq.SelectConfig.select_index)
}

inline const SelectConfig* SelectConfig::internal_default_instance() {
  return &SelectConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// RankPredict

// required string type = 1;
inline bool RankPredict::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankPredict::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankPredict::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankPredict::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& RankPredict::type() const {
  // @@protoc_insertion_point(field_get:anyq.RankPredict.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RankPredict::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.RankPredict.type)
}
inline void RankPredict::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.RankPredict.type)
}
inline void RankPredict::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.RankPredict.type)
}
inline ::std::string* RankPredict::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:anyq.RankPredict.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RankPredict::release_type() {
  // @@protoc_insertion_point(field_release:anyq.RankPredict.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RankPredict::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:anyq.RankPredict.type)
}

// optional string using_dict_name = 2;
inline bool RankPredict::has_using_dict_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankPredict::set_has_using_dict_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankPredict::clear_has_using_dict_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankPredict::clear_using_dict_name() {
  using_dict_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_using_dict_name();
}
inline const ::std::string& RankPredict::using_dict_name() const {
  // @@protoc_insertion_point(field_get:anyq.RankPredict.using_dict_name)
  return using_dict_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RankPredict::set_using_dict_name(const ::std::string& value) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.RankPredict.using_dict_name)
}
inline void RankPredict::set_using_dict_name(const char* value) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.RankPredict.using_dict_name)
}
inline void RankPredict::set_using_dict_name(const char* value, size_t size) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.RankPredict.using_dict_name)
}
inline ::std::string* RankPredict::mutable_using_dict_name() {
  set_has_using_dict_name();
  // @@protoc_insertion_point(field_mutable:anyq.RankPredict.using_dict_name)
  return using_dict_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RankPredict::release_using_dict_name() {
  // @@protoc_insertion_point(field_release:anyq.RankPredict.using_dict_name)
  clear_has_using_dict_name();
  return using_dict_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RankPredict::set_allocated_using_dict_name(::std::string* using_dict_name) {
  if (using_dict_name != NULL) {
    set_has_using_dict_name();
  } else {
    clear_has_using_dict_name();
  }
  using_dict_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), using_dict_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.RankPredict.using_dict_name)
}

// optional string booster_model_path = 3;
inline bool RankPredict::has_booster_model_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankPredict::set_has_booster_model_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankPredict::clear_has_booster_model_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankPredict::clear_booster_model_path() {
  booster_model_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_booster_model_path();
}
inline const ::std::string& RankPredict::booster_model_path() const {
  // @@protoc_insertion_point(field_get:anyq.RankPredict.booster_model_path)
  return booster_model_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RankPredict::set_booster_model_path(const ::std::string& value) {
  set_has_booster_model_path();
  booster_model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.RankPredict.booster_model_path)
}
inline void RankPredict::set_booster_model_path(const char* value) {
  set_has_booster_model_path();
  booster_model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.RankPredict.booster_model_path)
}
inline void RankPredict::set_booster_model_path(const char* value, size_t size) {
  set_has_booster_model_path();
  booster_model_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.RankPredict.booster_model_path)
}
inline ::std::string* RankPredict::mutable_booster_model_path() {
  set_has_booster_model_path();
  // @@protoc_insertion_point(field_mutable:anyq.RankPredict.booster_model_path)
  return booster_model_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RankPredict::release_booster_model_path() {
  // @@protoc_insertion_point(field_release:anyq.RankPredict.booster_model_path)
  clear_has_booster_model_path();
  return booster_model_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RankPredict::set_allocated_booster_model_path(::std::string* booster_model_path) {
  if (booster_model_path != NULL) {
    set_has_booster_model_path();
  } else {
    clear_has_booster_model_path();
  }
  booster_model_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), booster_model_path);
  // @@protoc_insertion_point(field_set_allocated:anyq.RankPredict.booster_model_path)
}

// optional .anyq.SelectConfig select_config = 101;
inline bool RankPredict::has_select_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankPredict::set_has_select_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankPredict::clear_has_select_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankPredict::clear_select_config() {
  if (select_config_ != NULL) select_config_->::anyq::SelectConfig::Clear();
  clear_has_select_config();
}
inline const ::anyq::SelectConfig& RankPredict::select_config() const {
  // @@protoc_insertion_point(field_get:anyq.RankPredict.select_config)
  return select_config_ != NULL ? *select_config_
                         : *::anyq::SelectConfig::internal_default_instance();
}
inline ::anyq::SelectConfig* RankPredict::mutable_select_config() {
  set_has_select_config();
  if (select_config_ == NULL) {
    select_config_ = new ::anyq::SelectConfig;
  }
  // @@protoc_insertion_point(field_mutable:anyq.RankPredict.select_config)
  return select_config_;
}
inline ::anyq::SelectConfig* RankPredict::release_select_config() {
  // @@protoc_insertion_point(field_release:anyq.RankPredict.select_config)
  clear_has_select_config();
  ::anyq::SelectConfig* temp = select_config_;
  select_config_ = NULL;
  return temp;
}
inline void RankPredict::set_allocated_select_config(::anyq::SelectConfig* select_config) {
  delete select_config_;
  select_config_ = select_config;
  if (select_config) {
    set_has_select_config();
  } else {
    clear_has_select_config();
  }
  // @@protoc_insertion_point(field_set_allocated:anyq.RankPredict.select_config)
}

inline const RankPredict* RankPredict::internal_default_instance() {
  return &RankPredict_default_instance_.get();
}
// -------------------------------------------------------------------

// PatternConfig

// required string pat_fname = 1;
inline bool PatternConfig::has_pat_fname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PatternConfig::set_has_pat_fname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PatternConfig::clear_has_pat_fname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PatternConfig::clear_pat_fname() {
  pat_fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pat_fname();
}
inline const ::std::string& PatternConfig::pat_fname() const {
  // @@protoc_insertion_point(field_get:anyq.PatternConfig.pat_fname)
  return pat_fname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PatternConfig::set_pat_fname(const ::std::string& value) {
  set_has_pat_fname();
  pat_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.PatternConfig.pat_fname)
}
inline void PatternConfig::set_pat_fname(const char* value) {
  set_has_pat_fname();
  pat_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.PatternConfig.pat_fname)
}
inline void PatternConfig::set_pat_fname(const char* value, size_t size) {
  set_has_pat_fname();
  pat_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.PatternConfig.pat_fname)
}
inline ::std::string* PatternConfig::mutable_pat_fname() {
  set_has_pat_fname();
  // @@protoc_insertion_point(field_mutable:anyq.PatternConfig.pat_fname)
  return pat_fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PatternConfig::release_pat_fname() {
  // @@protoc_insertion_point(field_release:anyq.PatternConfig.pat_fname)
  clear_has_pat_fname();
  return pat_fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PatternConfig::set_allocated_pat_fname(::std::string* pat_fname) {
  if (pat_fname != NULL) {
    set_has_pat_fname();
  } else {
    clear_has_pat_fname();
  }
  pat_fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pat_fname);
  // @@protoc_insertion_point(field_set_allocated:anyq.PatternConfig.pat_fname)
}

// required string dict_fname = 2;
inline bool PatternConfig::has_dict_fname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PatternConfig::set_has_dict_fname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PatternConfig::clear_has_dict_fname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PatternConfig::clear_dict_fname() {
  dict_fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dict_fname();
}
inline const ::std::string& PatternConfig::dict_fname() const {
  // @@protoc_insertion_point(field_get:anyq.PatternConfig.dict_fname)
  return dict_fname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PatternConfig::set_dict_fname(const ::std::string& value) {
  set_has_dict_fname();
  dict_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.PatternConfig.dict_fname)
}
inline void PatternConfig::set_dict_fname(const char* value) {
  set_has_dict_fname();
  dict_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.PatternConfig.dict_fname)
}
inline void PatternConfig::set_dict_fname(const char* value, size_t size) {
  set_has_dict_fname();
  dict_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.PatternConfig.dict_fname)
}
inline ::std::string* PatternConfig::mutable_dict_fname() {
  set_has_dict_fname();
  // @@protoc_insertion_point(field_mutable:anyq.PatternConfig.dict_fname)
  return dict_fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PatternConfig::release_dict_fname() {
  // @@protoc_insertion_point(field_release:anyq.PatternConfig.dict_fname)
  clear_has_dict_fname();
  return dict_fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PatternConfig::set_allocated_dict_fname(::std::string* dict_fname) {
  if (dict_fname != NULL) {
    set_has_dict_fname();
  } else {
    clear_has_dict_fname();
  }
  dict_fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dict_fname);
  // @@protoc_insertion_point(field_set_allocated:anyq.PatternConfig.dict_fname)
}

// required string igno_fname = 3;
inline bool PatternConfig::has_igno_fname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PatternConfig::set_has_igno_fname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PatternConfig::clear_has_igno_fname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PatternConfig::clear_igno_fname() {
  igno_fname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_igno_fname();
}
inline const ::std::string& PatternConfig::igno_fname() const {
  // @@protoc_insertion_point(field_get:anyq.PatternConfig.igno_fname)
  return igno_fname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PatternConfig::set_igno_fname(const ::std::string& value) {
  set_has_igno_fname();
  igno_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.PatternConfig.igno_fname)
}
inline void PatternConfig::set_igno_fname(const char* value) {
  set_has_igno_fname();
  igno_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.PatternConfig.igno_fname)
}
inline void PatternConfig::set_igno_fname(const char* value, size_t size) {
  set_has_igno_fname();
  igno_fname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.PatternConfig.igno_fname)
}
inline ::std::string* PatternConfig::mutable_igno_fname() {
  set_has_igno_fname();
  // @@protoc_insertion_point(field_mutable:anyq.PatternConfig.igno_fname)
  return igno_fname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PatternConfig::release_igno_fname() {
  // @@protoc_insertion_point(field_release:anyq.PatternConfig.igno_fname)
  clear_has_igno_fname();
  return igno_fname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PatternConfig::set_allocated_igno_fname(::std::string* igno_fname) {
  if (igno_fname != NULL) {
    set_has_igno_fname();
  } else {
    clear_has_igno_fname();
  }
  igno_fname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), igno_fname);
  // @@protoc_insertion_point(field_set_allocated:anyq.PatternConfig.igno_fname)
}

inline const PatternConfig* PatternConfig::internal_default_instance() {
  return &PatternConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// TFSimConfig

// optional int32 pad_id = 1;
inline bool TFSimConfig::has_pad_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFSimConfig::set_has_pad_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFSimConfig::clear_has_pad_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFSimConfig::clear_pad_id() {
  pad_id_ = 0;
  clear_has_pad_id();
}
inline ::google::protobuf::int32 TFSimConfig::pad_id() const {
  // @@protoc_insertion_point(field_get:anyq.TFSimConfig.pad_id)
  return pad_id_;
}
inline void TFSimConfig::set_pad_id(::google::protobuf::int32 value) {
  set_has_pad_id();
  pad_id_ = value;
  // @@protoc_insertion_point(field_set:anyq.TFSimConfig.pad_id)
}

// optional int32 sen_len = 2;
inline bool TFSimConfig::has_sen_len() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFSimConfig::set_has_sen_len() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFSimConfig::clear_has_sen_len() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFSimConfig::clear_sen_len() {
  sen_len_ = 0;
  clear_has_sen_len();
}
inline ::google::protobuf::int32 TFSimConfig::sen_len() const {
  // @@protoc_insertion_point(field_get:anyq.TFSimConfig.sen_len)
  return sen_len_;
}
inline void TFSimConfig::set_sen_len(::google::protobuf::int32 value) {
  set_has_sen_len();
  sen_len_ = value;
  // @@protoc_insertion_point(field_set:anyq.TFSimConfig.sen_len)
}

// optional string left_input_name = 3;
inline bool TFSimConfig::has_left_input_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFSimConfig::set_has_left_input_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFSimConfig::clear_has_left_input_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFSimConfig::clear_left_input_name() {
  left_input_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_left_input_name();
}
inline const ::std::string& TFSimConfig::left_input_name() const {
  // @@protoc_insertion_point(field_get:anyq.TFSimConfig.left_input_name)
  return left_input_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TFSimConfig::set_left_input_name(const ::std::string& value) {
  set_has_left_input_name();
  left_input_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.TFSimConfig.left_input_name)
}
inline void TFSimConfig::set_left_input_name(const char* value) {
  set_has_left_input_name();
  left_input_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.TFSimConfig.left_input_name)
}
inline void TFSimConfig::set_left_input_name(const char* value, size_t size) {
  set_has_left_input_name();
  left_input_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.TFSimConfig.left_input_name)
}
inline ::std::string* TFSimConfig::mutable_left_input_name() {
  set_has_left_input_name();
  // @@protoc_insertion_point(field_mutable:anyq.TFSimConfig.left_input_name)
  return left_input_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TFSimConfig::release_left_input_name() {
  // @@protoc_insertion_point(field_release:anyq.TFSimConfig.left_input_name)
  clear_has_left_input_name();
  return left_input_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TFSimConfig::set_allocated_left_input_name(::std::string* left_input_name) {
  if (left_input_name != NULL) {
    set_has_left_input_name();
  } else {
    clear_has_left_input_name();
  }
  left_input_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), left_input_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.TFSimConfig.left_input_name)
}

// optional string right_input_name = 4;
inline bool TFSimConfig::has_right_input_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TFSimConfig::set_has_right_input_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TFSimConfig::clear_has_right_input_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TFSimConfig::clear_right_input_name() {
  right_input_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_right_input_name();
}
inline const ::std::string& TFSimConfig::right_input_name() const {
  // @@protoc_insertion_point(field_get:anyq.TFSimConfig.right_input_name)
  return right_input_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TFSimConfig::set_right_input_name(const ::std::string& value) {
  set_has_right_input_name();
  right_input_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.TFSimConfig.right_input_name)
}
inline void TFSimConfig::set_right_input_name(const char* value) {
  set_has_right_input_name();
  right_input_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.TFSimConfig.right_input_name)
}
inline void TFSimConfig::set_right_input_name(const char* value, size_t size) {
  set_has_right_input_name();
  right_input_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.TFSimConfig.right_input_name)
}
inline ::std::string* TFSimConfig::mutable_right_input_name() {
  set_has_right_input_name();
  // @@protoc_insertion_point(field_mutable:anyq.TFSimConfig.right_input_name)
  return right_input_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TFSimConfig::release_right_input_name() {
  // @@protoc_insertion_point(field_release:anyq.TFSimConfig.right_input_name)
  clear_has_right_input_name();
  return right_input_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TFSimConfig::set_allocated_right_input_name(::std::string* right_input_name) {
  if (right_input_name != NULL) {
    set_has_right_input_name();
  } else {
    clear_has_right_input_name();
  }
  right_input_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), right_input_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.TFSimConfig.right_input_name)
}

// optional string output_name = 5;
inline bool TFSimConfig::has_output_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TFSimConfig::set_has_output_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TFSimConfig::clear_has_output_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TFSimConfig::clear_output_name() {
  output_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_name();
}
inline const ::std::string& TFSimConfig::output_name() const {
  // @@protoc_insertion_point(field_get:anyq.TFSimConfig.output_name)
  return output_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TFSimConfig::set_output_name(const ::std::string& value) {
  set_has_output_name();
  output_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.TFSimConfig.output_name)
}
inline void TFSimConfig::set_output_name(const char* value) {
  set_has_output_name();
  output_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.TFSimConfig.output_name)
}
inline void TFSimConfig::set_output_name(const char* value, size_t size) {
  set_has_output_name();
  output_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.TFSimConfig.output_name)
}
inline ::std::string* TFSimConfig::mutable_output_name() {
  set_has_output_name();
  // @@protoc_insertion_point(field_mutable:anyq.TFSimConfig.output_name)
  return output_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TFSimConfig::release_output_name() {
  // @@protoc_insertion_point(field_release:anyq.TFSimConfig.output_name)
  clear_has_output_name();
  return output_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TFSimConfig::set_allocated_output_name(::std::string* output_name) {
  if (output_name != NULL) {
    set_has_output_name();
  } else {
    clear_has_output_name();
  }
  output_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.TFSimConfig.output_name)
}

inline const TFSimConfig* TFSimConfig::internal_default_instance() {
  return &TFSimConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// MatchingConfig

// required string name = 1;
inline bool MatchingConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchingConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchingConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchingConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MatchingConfig::name() const {
  // @@protoc_insertion_point(field_get:anyq.MatchingConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.MatchingConfig.name)
}
inline void MatchingConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.MatchingConfig.name)
}
inline void MatchingConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.MatchingConfig.name)
}
inline ::std::string* MatchingConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:anyq.MatchingConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchingConfig::release_name() {
  // @@protoc_insertion_point(field_release:anyq.MatchingConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:anyq.MatchingConfig.name)
}

// required string type = 2;
inline bool MatchingConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchingConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchingConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchingConfig::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& MatchingConfig::type() const {
  // @@protoc_insertion_point(field_get:anyq.MatchingConfig.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.MatchingConfig.type)
}
inline void MatchingConfig::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.MatchingConfig.type)
}
inline void MatchingConfig::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.MatchingConfig.type)
}
inline ::std::string* MatchingConfig::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:anyq.MatchingConfig.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchingConfig::release_type() {
  // @@protoc_insertion_point(field_release:anyq.MatchingConfig.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:anyq.MatchingConfig.type)
}

// optional string using_dict_name = 3;
inline bool MatchingConfig::has_using_dict_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchingConfig::set_has_using_dict_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchingConfig::clear_has_using_dict_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchingConfig::clear_using_dict_name() {
  using_dict_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_using_dict_name();
}
inline const ::std::string& MatchingConfig::using_dict_name() const {
  // @@protoc_insertion_point(field_get:anyq.MatchingConfig.using_dict_name)
  return using_dict_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_using_dict_name(const ::std::string& value) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.MatchingConfig.using_dict_name)
}
inline void MatchingConfig::set_using_dict_name(const char* value) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.MatchingConfig.using_dict_name)
}
inline void MatchingConfig::set_using_dict_name(const char* value, size_t size) {
  set_has_using_dict_name();
  using_dict_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.MatchingConfig.using_dict_name)
}
inline ::std::string* MatchingConfig::mutable_using_dict_name() {
  set_has_using_dict_name();
  // @@protoc_insertion_point(field_mutable:anyq.MatchingConfig.using_dict_name)
  return using_dict_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchingConfig::release_using_dict_name() {
  // @@protoc_insertion_point(field_release:anyq.MatchingConfig.using_dict_name)
  clear_has_using_dict_name();
  return using_dict_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_allocated_using_dict_name(::std::string* using_dict_name) {
  if (using_dict_name != NULL) {
    set_has_using_dict_name();
  } else {
    clear_has_using_dict_name();
  }
  using_dict_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), using_dict_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.MatchingConfig.using_dict_name)
}

// required int32 output_num = 4;
inline bool MatchingConfig::has_output_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchingConfig::set_has_output_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchingConfig::clear_has_output_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchingConfig::clear_output_num() {
  output_num_ = 0;
  clear_has_output_num();
}
inline ::google::protobuf::int32 MatchingConfig::output_num() const {
  // @@protoc_insertion_point(field_get:anyq.MatchingConfig.output_num)
  return output_num_;
}
inline void MatchingConfig::set_output_num(::google::protobuf::int32 value) {
  set_has_output_num();
  output_num_ = value;
  // @@protoc_insertion_point(field_set:anyq.MatchingConfig.output_num)
}

// required bool rough = 5;
inline bool MatchingConfig::has_rough() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MatchingConfig::set_has_rough() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MatchingConfig::clear_has_rough() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MatchingConfig::clear_rough() {
  rough_ = false;
  clear_has_rough();
}
inline bool MatchingConfig::rough() const {
  // @@protoc_insertion_point(field_get:anyq.MatchingConfig.rough)
  return rough_;
}
inline void MatchingConfig::set_rough(bool value) {
  set_has_rough();
  rough_ = value;
  // @@protoc_insertion_point(field_set:anyq.MatchingConfig.rough)
}

// optional .anyq.PatternConfig pattern = 6;
inline bool MatchingConfig::has_pattern() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MatchingConfig::set_has_pattern() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MatchingConfig::clear_has_pattern() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MatchingConfig::clear_pattern() {
  if (pattern_ != NULL) pattern_->::anyq::PatternConfig::Clear();
  clear_has_pattern();
}
inline const ::anyq::PatternConfig& MatchingConfig::pattern() const {
  // @@protoc_insertion_point(field_get:anyq.MatchingConfig.pattern)
  return pattern_ != NULL ? *pattern_
                         : *::anyq::PatternConfig::internal_default_instance();
}
inline ::anyq::PatternConfig* MatchingConfig::mutable_pattern() {
  set_has_pattern();
  if (pattern_ == NULL) {
    pattern_ = new ::anyq::PatternConfig;
  }
  // @@protoc_insertion_point(field_mutable:anyq.MatchingConfig.pattern)
  return pattern_;
}
inline ::anyq::PatternConfig* MatchingConfig::release_pattern() {
  // @@protoc_insertion_point(field_release:anyq.MatchingConfig.pattern)
  clear_has_pattern();
  ::anyq::PatternConfig* temp = pattern_;
  pattern_ = NULL;
  return temp;
}
inline void MatchingConfig::set_allocated_pattern(::anyq::PatternConfig* pattern) {
  delete pattern_;
  pattern_ = pattern;
  if (pattern) {
    set_has_pattern();
  } else {
    clear_has_pattern();
  }
  // @@protoc_insertion_point(field_set_allocated:anyq.MatchingConfig.pattern)
}

// optional .anyq.TFSimConfig tfconf = 10;
inline bool MatchingConfig::has_tfconf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MatchingConfig::set_has_tfconf() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MatchingConfig::clear_has_tfconf() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MatchingConfig::clear_tfconf() {
  if (tfconf_ != NULL) tfconf_->::anyq::TFSimConfig::Clear();
  clear_has_tfconf();
}
inline const ::anyq::TFSimConfig& MatchingConfig::tfconf() const {
  // @@protoc_insertion_point(field_get:anyq.MatchingConfig.tfconf)
  return tfconf_ != NULL ? *tfconf_
                         : *::anyq::TFSimConfig::internal_default_instance();
}
inline ::anyq::TFSimConfig* MatchingConfig::mutable_tfconf() {
  set_has_tfconf();
  if (tfconf_ == NULL) {
    tfconf_ = new ::anyq::TFSimConfig;
  }
  // @@protoc_insertion_point(field_mutable:anyq.MatchingConfig.tfconf)
  return tfconf_;
}
inline ::anyq::TFSimConfig* MatchingConfig::release_tfconf() {
  // @@protoc_insertion_point(field_release:anyq.MatchingConfig.tfconf)
  clear_has_tfconf();
  ::anyq::TFSimConfig* temp = tfconf_;
  tfconf_ = NULL;
  return temp;
}
inline void MatchingConfig::set_allocated_tfconf(::anyq::TFSimConfig* tfconf) {
  delete tfconf_;
  tfconf_ = tfconf;
  if (tfconf) {
    set_has_tfconf();
  } else {
    clear_has_tfconf();
  }
  // @@protoc_insertion_point(field_set_allocated:anyq.MatchingConfig.tfconf)
}

// optional string query_feed_name = 11;
inline bool MatchingConfig::has_query_feed_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MatchingConfig::set_has_query_feed_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MatchingConfig::clear_has_query_feed_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MatchingConfig::clear_query_feed_name() {
  query_feed_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_feed_name();
}
inline const ::std::string& MatchingConfig::query_feed_name() const {
  // @@protoc_insertion_point(field_get:anyq.MatchingConfig.query_feed_name)
  return query_feed_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_query_feed_name(const ::std::string& value) {
  set_has_query_feed_name();
  query_feed_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.MatchingConfig.query_feed_name)
}
inline void MatchingConfig::set_query_feed_name(const char* value) {
  set_has_query_feed_name();
  query_feed_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.MatchingConfig.query_feed_name)
}
inline void MatchingConfig::set_query_feed_name(const char* value, size_t size) {
  set_has_query_feed_name();
  query_feed_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.MatchingConfig.query_feed_name)
}
inline ::std::string* MatchingConfig::mutable_query_feed_name() {
  set_has_query_feed_name();
  // @@protoc_insertion_point(field_mutable:anyq.MatchingConfig.query_feed_name)
  return query_feed_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchingConfig::release_query_feed_name() {
  // @@protoc_insertion_point(field_release:anyq.MatchingConfig.query_feed_name)
  clear_has_query_feed_name();
  return query_feed_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_allocated_query_feed_name(::std::string* query_feed_name) {
  if (query_feed_name != NULL) {
    set_has_query_feed_name();
  } else {
    clear_has_query_feed_name();
  }
  query_feed_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_feed_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.MatchingConfig.query_feed_name)
}

// optional string cand_feed_name = 12;
inline bool MatchingConfig::has_cand_feed_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MatchingConfig::set_has_cand_feed_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MatchingConfig::clear_has_cand_feed_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MatchingConfig::clear_cand_feed_name() {
  cand_feed_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cand_feed_name();
}
inline const ::std::string& MatchingConfig::cand_feed_name() const {
  // @@protoc_insertion_point(field_get:anyq.MatchingConfig.cand_feed_name)
  return cand_feed_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_cand_feed_name(const ::std::string& value) {
  set_has_cand_feed_name();
  cand_feed_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.MatchingConfig.cand_feed_name)
}
inline void MatchingConfig::set_cand_feed_name(const char* value) {
  set_has_cand_feed_name();
  cand_feed_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.MatchingConfig.cand_feed_name)
}
inline void MatchingConfig::set_cand_feed_name(const char* value, size_t size) {
  set_has_cand_feed_name();
  cand_feed_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.MatchingConfig.cand_feed_name)
}
inline ::std::string* MatchingConfig::mutable_cand_feed_name() {
  set_has_cand_feed_name();
  // @@protoc_insertion_point(field_mutable:anyq.MatchingConfig.cand_feed_name)
  return cand_feed_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchingConfig::release_cand_feed_name() {
  // @@protoc_insertion_point(field_release:anyq.MatchingConfig.cand_feed_name)
  clear_has_cand_feed_name();
  return cand_feed_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_allocated_cand_feed_name(::std::string* cand_feed_name) {
  if (cand_feed_name != NULL) {
    set_has_cand_feed_name();
  } else {
    clear_has_cand_feed_name();
  }
  cand_feed_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cand_feed_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.MatchingConfig.cand_feed_name)
}

// optional string score_fetch_name = 13;
inline bool MatchingConfig::has_score_fetch_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MatchingConfig::set_has_score_fetch_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MatchingConfig::clear_has_score_fetch_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MatchingConfig::clear_score_fetch_name() {
  score_fetch_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_score_fetch_name();
}
inline const ::std::string& MatchingConfig::score_fetch_name() const {
  // @@protoc_insertion_point(field_get:anyq.MatchingConfig.score_fetch_name)
  return score_fetch_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_score_fetch_name(const ::std::string& value) {
  set_has_score_fetch_name();
  score_fetch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.MatchingConfig.score_fetch_name)
}
inline void MatchingConfig::set_score_fetch_name(const char* value) {
  set_has_score_fetch_name();
  score_fetch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.MatchingConfig.score_fetch_name)
}
inline void MatchingConfig::set_score_fetch_name(const char* value, size_t size) {
  set_has_score_fetch_name();
  score_fetch_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.MatchingConfig.score_fetch_name)
}
inline ::std::string* MatchingConfig::mutable_score_fetch_name() {
  set_has_score_fetch_name();
  // @@protoc_insertion_point(field_mutable:anyq.MatchingConfig.score_fetch_name)
  return score_fetch_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchingConfig::release_score_fetch_name() {
  // @@protoc_insertion_point(field_release:anyq.MatchingConfig.score_fetch_name)
  clear_has_score_fetch_name();
  return score_fetch_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchingConfig::set_allocated_score_fetch_name(::std::string* score_fetch_name) {
  if (score_fetch_name != NULL) {
    set_has_score_fetch_name();
  } else {
    clear_has_score_fetch_name();
  }
  score_fetch_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), score_fetch_name);
  // @@protoc_insertion_point(field_set_allocated:anyq.MatchingConfig.score_fetch_name)
}

inline const MatchingConfig* MatchingConfig::internal_default_instance() {
  return &MatchingConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// RankConfig

// optional string name = 1;
inline bool RankConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& RankConfig::name() const {
  // @@protoc_insertion_point(field_get:anyq.RankConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RankConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.RankConfig.name)
}
inline void RankConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.RankConfig.name)
}
inline void RankConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.RankConfig.name)
}
inline ::std::string* RankConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:anyq.RankConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RankConfig::release_name() {
  // @@protoc_insertion_point(field_release:anyq.RankConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RankConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:anyq.RankConfig.name)
}

// optional int32 rough_top_result = 2;
inline bool RankConfig::has_rough_top_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankConfig::set_has_rough_top_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankConfig::clear_has_rough_top_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankConfig::clear_rough_top_result() {
  rough_top_result_ = 0;
  clear_has_rough_top_result();
}
inline ::google::protobuf::int32 RankConfig::rough_top_result() const {
  // @@protoc_insertion_point(field_get:anyq.RankConfig.rough_top_result)
  return rough_top_result_;
}
inline void RankConfig::set_rough_top_result(::google::protobuf::int32 value) {
  set_has_rough_top_result();
  rough_top_result_ = value;
  // @@protoc_insertion_point(field_set:anyq.RankConfig.rough_top_result)
}

// optional int32 top_result = 3;
inline bool RankConfig::has_top_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankConfig::set_has_top_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankConfig::clear_has_top_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankConfig::clear_top_result() {
  top_result_ = 0;
  clear_has_top_result();
}
inline ::google::protobuf::int32 RankConfig::top_result() const {
  // @@protoc_insertion_point(field_get:anyq.RankConfig.top_result)
  return top_result_;
}
inline void RankConfig::set_top_result(::google::protobuf::int32 value) {
  set_has_top_result();
  top_result_ = value;
  // @@protoc_insertion_point(field_set:anyq.RankConfig.top_result)
}

// repeated .anyq.MatchingConfig matching_config = 4;
inline int RankConfig::matching_config_size() const {
  return matching_config_.size();
}
inline void RankConfig::clear_matching_config() {
  matching_config_.Clear();
}
inline const ::anyq::MatchingConfig& RankConfig::matching_config(int index) const {
  // @@protoc_insertion_point(field_get:anyq.RankConfig.matching_config)
  return matching_config_.Get(index);
}
inline ::anyq::MatchingConfig* RankConfig::mutable_matching_config(int index) {
  // @@protoc_insertion_point(field_mutable:anyq.RankConfig.matching_config)
  return matching_config_.Mutable(index);
}
inline ::anyq::MatchingConfig* RankConfig::add_matching_config() {
  // @@protoc_insertion_point(field_add:anyq.RankConfig.matching_config)
  return matching_config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::anyq::MatchingConfig >*
RankConfig::mutable_matching_config() {
  // @@protoc_insertion_point(field_mutable_list:anyq.RankConfig.matching_config)
  return &matching_config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::anyq::MatchingConfig >&
RankConfig::matching_config() const {
  // @@protoc_insertion_point(field_list:anyq.RankConfig.matching_config)
  return matching_config_;
}

// optional .anyq.RankPredict rough_rank_predictor = 5;
inline bool RankConfig::has_rough_rank_predictor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankConfig::set_has_rough_rank_predictor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankConfig::clear_has_rough_rank_predictor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankConfig::clear_rough_rank_predictor() {
  if (rough_rank_predictor_ != NULL) rough_rank_predictor_->::anyq::RankPredict::Clear();
  clear_has_rough_rank_predictor();
}
inline const ::anyq::RankPredict& RankConfig::rough_rank_predictor() const {
  // @@protoc_insertion_point(field_get:anyq.RankConfig.rough_rank_predictor)
  return rough_rank_predictor_ != NULL ? *rough_rank_predictor_
                         : *::anyq::RankPredict::internal_default_instance();
}
inline ::anyq::RankPredict* RankConfig::mutable_rough_rank_predictor() {
  set_has_rough_rank_predictor();
  if (rough_rank_predictor_ == NULL) {
    rough_rank_predictor_ = new ::anyq::RankPredict;
  }
  // @@protoc_insertion_point(field_mutable:anyq.RankConfig.rough_rank_predictor)
  return rough_rank_predictor_;
}
inline ::anyq::RankPredict* RankConfig::release_rough_rank_predictor() {
  // @@protoc_insertion_point(field_release:anyq.RankConfig.rough_rank_predictor)
  clear_has_rough_rank_predictor();
  ::anyq::RankPredict* temp = rough_rank_predictor_;
  rough_rank_predictor_ = NULL;
  return temp;
}
inline void RankConfig::set_allocated_rough_rank_predictor(::anyq::RankPredict* rough_rank_predictor) {
  delete rough_rank_predictor_;
  rough_rank_predictor_ = rough_rank_predictor;
  if (rough_rank_predictor) {
    set_has_rough_rank_predictor();
  } else {
    clear_has_rough_rank_predictor();
  }
  // @@protoc_insertion_point(field_set_allocated:anyq.RankConfig.rough_rank_predictor)
}

// optional .anyq.RankPredict rank_predictor = 6;
inline bool RankConfig::has_rank_predictor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankConfig::set_has_rank_predictor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RankConfig::clear_has_rank_predictor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RankConfig::clear_rank_predictor() {
  if (rank_predictor_ != NULL) rank_predictor_->::anyq::RankPredict::Clear();
  clear_has_rank_predictor();
}
inline const ::anyq::RankPredict& RankConfig::rank_predictor() const {
  // @@protoc_insertion_point(field_get:anyq.RankConfig.rank_predictor)
  return rank_predictor_ != NULL ? *rank_predictor_
                         : *::anyq::RankPredict::internal_default_instance();
}
inline ::anyq::RankPredict* RankConfig::mutable_rank_predictor() {
  set_has_rank_predictor();
  if (rank_predictor_ == NULL) {
    rank_predictor_ = new ::anyq::RankPredict;
  }
  // @@protoc_insertion_point(field_mutable:anyq.RankConfig.rank_predictor)
  return rank_predictor_;
}
inline ::anyq::RankPredict* RankConfig::release_rank_predictor() {
  // @@protoc_insertion_point(field_release:anyq.RankConfig.rank_predictor)
  clear_has_rank_predictor();
  ::anyq::RankPredict* temp = rank_predictor_;
  rank_predictor_ = NULL;
  return temp;
}
inline void RankConfig::set_allocated_rank_predictor(::anyq::RankPredict* rank_predictor) {
  delete rank_predictor_;
  rank_predictor_ = rank_predictor;
  if (rank_predictor) {
    set_has_rank_predictor();
  } else {
    clear_has_rank_predictor();
  }
  // @@protoc_insertion_point(field_set_allocated:anyq.RankConfig.rank_predictor)
}

// optional float rough_threshold = 7;
inline bool RankConfig::has_rough_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RankConfig::set_has_rough_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RankConfig::clear_has_rough_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RankConfig::clear_rough_threshold() {
  rough_threshold_ = 0;
  clear_has_rough_threshold();
}
inline float RankConfig::rough_threshold() const {
  // @@protoc_insertion_point(field_get:anyq.RankConfig.rough_threshold)
  return rough_threshold_;
}
inline void RankConfig::set_rough_threshold(float value) {
  set_has_rough_threshold();
  rough_threshold_ = value;
  // @@protoc_insertion_point(field_set:anyq.RankConfig.rough_threshold)
}

// optional float threshold = 8;
inline bool RankConfig::has_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RankConfig::set_has_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RankConfig::clear_has_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RankConfig::clear_threshold() {
  threshold_ = 0;
  clear_has_threshold();
}
inline float RankConfig::threshold() const {
  // @@protoc_insertion_point(field_get:anyq.RankConfig.threshold)
  return threshold_;
}
inline void RankConfig::set_threshold(float value) {
  set_has_threshold();
  threshold_ = value;
  // @@protoc_insertion_point(field_set:anyq.RankConfig.threshold)
}

// optional bool deep_rank_with_answer = 9;
inline bool RankConfig::has_deep_rank_with_answer() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RankConfig::set_has_deep_rank_with_answer() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RankConfig::clear_has_deep_rank_with_answer() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RankConfig::clear_deep_rank_with_answer() {
  deep_rank_with_answer_ = false;
  clear_has_deep_rank_with_answer();
}
inline bool RankConfig::deep_rank_with_answer() const {
  // @@protoc_insertion_point(field_get:anyq.RankConfig.deep_rank_with_answer)
  return deep_rank_with_answer_;
}
inline void RankConfig::set_deep_rank_with_answer(bool value) {
  set_has_deep_rank_with_answer();
  deep_rank_with_answer_ = value;
  // @@protoc_insertion_point(field_set:anyq.RankConfig.deep_rank_with_answer)
}

// optional int32 max_ans_num_per_query = 10;
inline bool RankConfig::has_max_ans_num_per_query() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RankConfig::set_has_max_ans_num_per_query() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RankConfig::clear_has_max_ans_num_per_query() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RankConfig::clear_max_ans_num_per_query() {
  max_ans_num_per_query_ = 0;
  clear_has_max_ans_num_per_query();
}
inline ::google::protobuf::int32 RankConfig::max_ans_num_per_query() const {
  // @@protoc_insertion_point(field_get:anyq.RankConfig.max_ans_num_per_query)
  return max_ans_num_per_query_;
}
inline void RankConfig::set_max_ans_num_per_query(::google::protobuf::int32 value) {
  set_has_max_ans_num_per_query();
  max_ans_num_per_query_ = value;
  // @@protoc_insertion_point(field_set:anyq.RankConfig.max_ans_num_per_query)
}

inline const RankConfig* RankConfig::internal_default_instance() {
  return &RankConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// AnyqStrategyConfig

// optional string analysis_config = 1;
inline bool AnyqStrategyConfig::has_analysis_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnyqStrategyConfig::set_has_analysis_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnyqStrategyConfig::clear_has_analysis_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnyqStrategyConfig::clear_analysis_config() {
  analysis_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_analysis_config();
}
inline const ::std::string& AnyqStrategyConfig::analysis_config() const {
  // @@protoc_insertion_point(field_get:anyq.AnyqStrategyConfig.analysis_config)
  return analysis_config_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnyqStrategyConfig::set_analysis_config(const ::std::string& value) {
  set_has_analysis_config();
  analysis_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.AnyqStrategyConfig.analysis_config)
}
inline void AnyqStrategyConfig::set_analysis_config(const char* value) {
  set_has_analysis_config();
  analysis_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.AnyqStrategyConfig.analysis_config)
}
inline void AnyqStrategyConfig::set_analysis_config(const char* value, size_t size) {
  set_has_analysis_config();
  analysis_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.AnyqStrategyConfig.analysis_config)
}
inline ::std::string* AnyqStrategyConfig::mutable_analysis_config() {
  set_has_analysis_config();
  // @@protoc_insertion_point(field_mutable:anyq.AnyqStrategyConfig.analysis_config)
  return analysis_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnyqStrategyConfig::release_analysis_config() {
  // @@protoc_insertion_point(field_release:anyq.AnyqStrategyConfig.analysis_config)
  clear_has_analysis_config();
  return analysis_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnyqStrategyConfig::set_allocated_analysis_config(::std::string* analysis_config) {
  if (analysis_config != NULL) {
    set_has_analysis_config();
  } else {
    clear_has_analysis_config();
  }
  analysis_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), analysis_config);
  // @@protoc_insertion_point(field_set_allocated:anyq.AnyqStrategyConfig.analysis_config)
}

// optional string retrieval_config = 2;
inline bool AnyqStrategyConfig::has_retrieval_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnyqStrategyConfig::set_has_retrieval_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnyqStrategyConfig::clear_has_retrieval_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnyqStrategyConfig::clear_retrieval_config() {
  retrieval_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_retrieval_config();
}
inline const ::std::string& AnyqStrategyConfig::retrieval_config() const {
  // @@protoc_insertion_point(field_get:anyq.AnyqStrategyConfig.retrieval_config)
  return retrieval_config_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnyqStrategyConfig::set_retrieval_config(const ::std::string& value) {
  set_has_retrieval_config();
  retrieval_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.AnyqStrategyConfig.retrieval_config)
}
inline void AnyqStrategyConfig::set_retrieval_config(const char* value) {
  set_has_retrieval_config();
  retrieval_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.AnyqStrategyConfig.retrieval_config)
}
inline void AnyqStrategyConfig::set_retrieval_config(const char* value, size_t size) {
  set_has_retrieval_config();
  retrieval_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.AnyqStrategyConfig.retrieval_config)
}
inline ::std::string* AnyqStrategyConfig::mutable_retrieval_config() {
  set_has_retrieval_config();
  // @@protoc_insertion_point(field_mutable:anyq.AnyqStrategyConfig.retrieval_config)
  return retrieval_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnyqStrategyConfig::release_retrieval_config() {
  // @@protoc_insertion_point(field_release:anyq.AnyqStrategyConfig.retrieval_config)
  clear_has_retrieval_config();
  return retrieval_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnyqStrategyConfig::set_allocated_retrieval_config(::std::string* retrieval_config) {
  if (retrieval_config != NULL) {
    set_has_retrieval_config();
  } else {
    clear_has_retrieval_config();
  }
  retrieval_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), retrieval_config);
  // @@protoc_insertion_point(field_set_allocated:anyq.AnyqStrategyConfig.retrieval_config)
}

// optional string rank_config = 3;
inline bool AnyqStrategyConfig::has_rank_config() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnyqStrategyConfig::set_has_rank_config() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnyqStrategyConfig::clear_has_rank_config() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnyqStrategyConfig::clear_rank_config() {
  rank_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rank_config();
}
inline const ::std::string& AnyqStrategyConfig::rank_config() const {
  // @@protoc_insertion_point(field_get:anyq.AnyqStrategyConfig.rank_config)
  return rank_config_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnyqStrategyConfig::set_rank_config(const ::std::string& value) {
  set_has_rank_config();
  rank_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.AnyqStrategyConfig.rank_config)
}
inline void AnyqStrategyConfig::set_rank_config(const char* value) {
  set_has_rank_config();
  rank_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.AnyqStrategyConfig.rank_config)
}
inline void AnyqStrategyConfig::set_rank_config(const char* value, size_t size) {
  set_has_rank_config();
  rank_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.AnyqStrategyConfig.rank_config)
}
inline ::std::string* AnyqStrategyConfig::mutable_rank_config() {
  set_has_rank_config();
  // @@protoc_insertion_point(field_mutable:anyq.AnyqStrategyConfig.rank_config)
  return rank_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnyqStrategyConfig::release_rank_config() {
  // @@protoc_insertion_point(field_release:anyq.AnyqStrategyConfig.rank_config)
  clear_has_rank_config();
  return rank_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnyqStrategyConfig::set_allocated_rank_config(::std::string* rank_config) {
  if (rank_config != NULL) {
    set_has_rank_config();
  } else {
    clear_has_rank_config();
  }
  rank_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rank_config);
  // @@protoc_insertion_point(field_set_allocated:anyq.AnyqStrategyConfig.rank_config)
}

inline const AnyqStrategyConfig* AnyqStrategyConfig::internal_default_instance() {
  return &AnyqStrategyConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// ReqPreprocPluginConfig

// required string type = 1;
inline bool ReqPreprocPluginConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPreprocPluginConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPreprocPluginConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPreprocPluginConfig::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& ReqPreprocPluginConfig::type() const {
  // @@protoc_insertion_point(field_get:anyq.ReqPreprocPluginConfig.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPreprocPluginConfig::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.ReqPreprocPluginConfig.type)
}
inline void ReqPreprocPluginConfig::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.ReqPreprocPluginConfig.type)
}
inline void ReqPreprocPluginConfig::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.ReqPreprocPluginConfig.type)
}
inline ::std::string* ReqPreprocPluginConfig::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:anyq.ReqPreprocPluginConfig.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqPreprocPluginConfig::release_type() {
  // @@protoc_insertion_point(field_release:anyq.ReqPreprocPluginConfig.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPreprocPluginConfig::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:anyq.ReqPreprocPluginConfig.type)
}

// required string name = 2;
inline bool ReqPreprocPluginConfig::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqPreprocPluginConfig::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqPreprocPluginConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqPreprocPluginConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ReqPreprocPluginConfig::name() const {
  // @@protoc_insertion_point(field_get:anyq.ReqPreprocPluginConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPreprocPluginConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.ReqPreprocPluginConfig.name)
}
inline void ReqPreprocPluginConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.ReqPreprocPluginConfig.name)
}
inline void ReqPreprocPluginConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.ReqPreprocPluginConfig.name)
}
inline ::std::string* ReqPreprocPluginConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:anyq.ReqPreprocPluginConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqPreprocPluginConfig::release_name() {
  // @@protoc_insertion_point(field_release:anyq.ReqPreprocPluginConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPreprocPluginConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:anyq.ReqPreprocPluginConfig.name)
}

inline const ReqPreprocPluginConfig* ReqPreprocPluginConfig::internal_default_instance() {
  return &ReqPreprocPluginConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// ReqPostprocPluginConfig

// required string type = 1;
inline bool ReqPostprocPluginConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPostprocPluginConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPostprocPluginConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPostprocPluginConfig::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& ReqPostprocPluginConfig::type() const {
  // @@protoc_insertion_point(field_get:anyq.ReqPostprocPluginConfig.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPostprocPluginConfig::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.ReqPostprocPluginConfig.type)
}
inline void ReqPostprocPluginConfig::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.ReqPostprocPluginConfig.type)
}
inline void ReqPostprocPluginConfig::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.ReqPostprocPluginConfig.type)
}
inline ::std::string* ReqPostprocPluginConfig::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:anyq.ReqPostprocPluginConfig.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqPostprocPluginConfig::release_type() {
  // @@protoc_insertion_point(field_release:anyq.ReqPostprocPluginConfig.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPostprocPluginConfig::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:anyq.ReqPostprocPluginConfig.type)
}

// required string name = 2;
inline bool ReqPostprocPluginConfig::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqPostprocPluginConfig::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqPostprocPluginConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqPostprocPluginConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ReqPostprocPluginConfig::name() const {
  // @@protoc_insertion_point(field_get:anyq.ReqPostprocPluginConfig.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPostprocPluginConfig::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.ReqPostprocPluginConfig.name)
}
inline void ReqPostprocPluginConfig::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.ReqPostprocPluginConfig.name)
}
inline void ReqPostprocPluginConfig::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.ReqPostprocPluginConfig.name)
}
inline ::std::string* ReqPostprocPluginConfig::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:anyq.ReqPostprocPluginConfig.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqPostprocPluginConfig::release_name() {
  // @@protoc_insertion_point(field_release:anyq.ReqPostprocPluginConfig.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqPostprocPluginConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:anyq.ReqPostprocPluginConfig.name)
}

inline const ReqPostprocPluginConfig* ReqPostprocPluginConfig::internal_default_instance() {
  return &ReqPostprocPluginConfig_default_instance_.get();
}
// -------------------------------------------------------------------

// ServerConfig

// required int32 idle_timeout_sec = 1;
inline bool ServerConfig::has_idle_timeout_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerConfig::set_has_idle_timeout_sec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerConfig::clear_has_idle_timeout_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerConfig::clear_idle_timeout_sec() {
  idle_timeout_sec_ = 0;
  clear_has_idle_timeout_sec();
}
inline ::google::protobuf::int32 ServerConfig::idle_timeout_sec() const {
  // @@protoc_insertion_point(field_get:anyq.ServerConfig.idle_timeout_sec)
  return idle_timeout_sec_;
}
inline void ServerConfig::set_idle_timeout_sec(::google::protobuf::int32 value) {
  set_has_idle_timeout_sec();
  idle_timeout_sec_ = value;
  // @@protoc_insertion_point(field_set:anyq.ServerConfig.idle_timeout_sec)
}

// required int32 max_concurrency = 2;
inline bool ServerConfig::has_max_concurrency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerConfig::set_has_max_concurrency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerConfig::clear_has_max_concurrency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerConfig::clear_max_concurrency() {
  max_concurrency_ = 0;
  clear_has_max_concurrency();
}
inline ::google::protobuf::int32 ServerConfig::max_concurrency() const {
  // @@protoc_insertion_point(field_get:anyq.ServerConfig.max_concurrency)
  return max_concurrency_;
}
inline void ServerConfig::set_max_concurrency(::google::protobuf::int32 value) {
  set_has_max_concurrency();
  max_concurrency_ = value;
  // @@protoc_insertion_point(field_set:anyq.ServerConfig.max_concurrency)
}

// required int32 port = 3;
inline bool ServerConfig::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerConfig::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerConfig::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerConfig::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ServerConfig::port() const {
  // @@protoc_insertion_point(field_get:anyq.ServerConfig.port)
  return port_;
}
inline void ServerConfig::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:anyq.ServerConfig.port)
}

// required string server_conf_dir = 4;
inline bool ServerConfig::has_server_conf_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerConfig::set_has_server_conf_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerConfig::clear_has_server_conf_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerConfig::clear_server_conf_dir() {
  server_conf_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_conf_dir();
}
inline const ::std::string& ServerConfig::server_conf_dir() const {
  // @@protoc_insertion_point(field_get:anyq.ServerConfig.server_conf_dir)
  return server_conf_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_server_conf_dir(const ::std::string& value) {
  set_has_server_conf_dir();
  server_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.ServerConfig.server_conf_dir)
}
inline void ServerConfig::set_server_conf_dir(const char* value) {
  set_has_server_conf_dir();
  server_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.ServerConfig.server_conf_dir)
}
inline void ServerConfig::set_server_conf_dir(const char* value, size_t size) {
  set_has_server_conf_dir();
  server_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.ServerConfig.server_conf_dir)
}
inline ::std::string* ServerConfig::mutable_server_conf_dir() {
  set_has_server_conf_dir();
  // @@protoc_insertion_point(field_mutable:anyq.ServerConfig.server_conf_dir)
  return server_conf_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_server_conf_dir() {
  // @@protoc_insertion_point(field_release:anyq.ServerConfig.server_conf_dir)
  clear_has_server_conf_dir();
  return server_conf_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_server_conf_dir(::std::string* server_conf_dir) {
  if (server_conf_dir != NULL) {
    set_has_server_conf_dir();
  } else {
    clear_has_server_conf_dir();
  }
  server_conf_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_conf_dir);
  // @@protoc_insertion_point(field_set_allocated:anyq.ServerConfig.server_conf_dir)
}

// required string log_conf_file = 5;
inline bool ServerConfig::has_log_conf_file() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerConfig::set_has_log_conf_file() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerConfig::clear_has_log_conf_file() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerConfig::clear_log_conf_file() {
  log_conf_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log_conf_file();
}
inline const ::std::string& ServerConfig::log_conf_file() const {
  // @@protoc_insertion_point(field_get:anyq.ServerConfig.log_conf_file)
  return log_conf_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_log_conf_file(const ::std::string& value) {
  set_has_log_conf_file();
  log_conf_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.ServerConfig.log_conf_file)
}
inline void ServerConfig::set_log_conf_file(const char* value) {
  set_has_log_conf_file();
  log_conf_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.ServerConfig.log_conf_file)
}
inline void ServerConfig::set_log_conf_file(const char* value, size_t size) {
  set_has_log_conf_file();
  log_conf_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.ServerConfig.log_conf_file)
}
inline ::std::string* ServerConfig::mutable_log_conf_file() {
  set_has_log_conf_file();
  // @@protoc_insertion_point(field_mutable:anyq.ServerConfig.log_conf_file)
  return log_conf_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_log_conf_file() {
  // @@protoc_insertion_point(field_release:anyq.ServerConfig.log_conf_file)
  clear_has_log_conf_file();
  return log_conf_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_log_conf_file(::std::string* log_conf_file) {
  if (log_conf_file != NULL) {
    set_has_log_conf_file();
  } else {
    clear_has_log_conf_file();
  }
  log_conf_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_conf_file);
  // @@protoc_insertion_point(field_set_allocated:anyq.ServerConfig.log_conf_file)
}

// required string anyq_dict_conf_dir = 6;
inline bool ServerConfig::has_anyq_dict_conf_dir() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerConfig::set_has_anyq_dict_conf_dir() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerConfig::clear_has_anyq_dict_conf_dir() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerConfig::clear_anyq_dict_conf_dir() {
  anyq_dict_conf_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_anyq_dict_conf_dir();
}
inline const ::std::string& ServerConfig::anyq_dict_conf_dir() const {
  // @@protoc_insertion_point(field_get:anyq.ServerConfig.anyq_dict_conf_dir)
  return anyq_dict_conf_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_anyq_dict_conf_dir(const ::std::string& value) {
  set_has_anyq_dict_conf_dir();
  anyq_dict_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.ServerConfig.anyq_dict_conf_dir)
}
inline void ServerConfig::set_anyq_dict_conf_dir(const char* value) {
  set_has_anyq_dict_conf_dir();
  anyq_dict_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.ServerConfig.anyq_dict_conf_dir)
}
inline void ServerConfig::set_anyq_dict_conf_dir(const char* value, size_t size) {
  set_has_anyq_dict_conf_dir();
  anyq_dict_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.ServerConfig.anyq_dict_conf_dir)
}
inline ::std::string* ServerConfig::mutable_anyq_dict_conf_dir() {
  set_has_anyq_dict_conf_dir();
  // @@protoc_insertion_point(field_mutable:anyq.ServerConfig.anyq_dict_conf_dir)
  return anyq_dict_conf_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_anyq_dict_conf_dir() {
  // @@protoc_insertion_point(field_release:anyq.ServerConfig.anyq_dict_conf_dir)
  clear_has_anyq_dict_conf_dir();
  return anyq_dict_conf_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_anyq_dict_conf_dir(::std::string* anyq_dict_conf_dir) {
  if (anyq_dict_conf_dir != NULL) {
    set_has_anyq_dict_conf_dir();
  } else {
    clear_has_anyq_dict_conf_dir();
  }
  anyq_dict_conf_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), anyq_dict_conf_dir);
  // @@protoc_insertion_point(field_set_allocated:anyq.ServerConfig.anyq_dict_conf_dir)
}

// required string anyq_conf_dir = 7;
inline bool ServerConfig::has_anyq_conf_dir() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerConfig::set_has_anyq_conf_dir() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerConfig::clear_has_anyq_conf_dir() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerConfig::clear_anyq_conf_dir() {
  anyq_conf_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_anyq_conf_dir();
}
inline const ::std::string& ServerConfig::anyq_conf_dir() const {
  // @@protoc_insertion_point(field_get:anyq.ServerConfig.anyq_conf_dir)
  return anyq_conf_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_anyq_conf_dir(const ::std::string& value) {
  set_has_anyq_conf_dir();
  anyq_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.ServerConfig.anyq_conf_dir)
}
inline void ServerConfig::set_anyq_conf_dir(const char* value) {
  set_has_anyq_conf_dir();
  anyq_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.ServerConfig.anyq_conf_dir)
}
inline void ServerConfig::set_anyq_conf_dir(const char* value, size_t size) {
  set_has_anyq_conf_dir();
  anyq_conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.ServerConfig.anyq_conf_dir)
}
inline ::std::string* ServerConfig::mutable_anyq_conf_dir() {
  set_has_anyq_conf_dir();
  // @@protoc_insertion_point(field_mutable:anyq.ServerConfig.anyq_conf_dir)
  return anyq_conf_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_anyq_conf_dir() {
  // @@protoc_insertion_point(field_release:anyq.ServerConfig.anyq_conf_dir)
  clear_has_anyq_conf_dir();
  return anyq_conf_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_anyq_conf_dir(::std::string* anyq_conf_dir) {
  if (anyq_conf_dir != NULL) {
    set_has_anyq_conf_dir();
  } else {
    clear_has_anyq_conf_dir();
  }
  anyq_conf_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), anyq_conf_dir);
  // @@protoc_insertion_point(field_set_allocated:anyq.ServerConfig.anyq_conf_dir)
}

// required .anyq.ReqPreprocPluginConfig preproc_plugin = 8;
inline bool ServerConfig::has_preproc_plugin() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServerConfig::set_has_preproc_plugin() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServerConfig::clear_has_preproc_plugin() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServerConfig::clear_preproc_plugin() {
  if (preproc_plugin_ != NULL) preproc_plugin_->::anyq::ReqPreprocPluginConfig::Clear();
  clear_has_preproc_plugin();
}
inline const ::anyq::ReqPreprocPluginConfig& ServerConfig::preproc_plugin() const {
  // @@protoc_insertion_point(field_get:anyq.ServerConfig.preproc_plugin)
  return preproc_plugin_ != NULL ? *preproc_plugin_
                         : *::anyq::ReqPreprocPluginConfig::internal_default_instance();
}
inline ::anyq::ReqPreprocPluginConfig* ServerConfig::mutable_preproc_plugin() {
  set_has_preproc_plugin();
  if (preproc_plugin_ == NULL) {
    preproc_plugin_ = new ::anyq::ReqPreprocPluginConfig;
  }
  // @@protoc_insertion_point(field_mutable:anyq.ServerConfig.preproc_plugin)
  return preproc_plugin_;
}
inline ::anyq::ReqPreprocPluginConfig* ServerConfig::release_preproc_plugin() {
  // @@protoc_insertion_point(field_release:anyq.ServerConfig.preproc_plugin)
  clear_has_preproc_plugin();
  ::anyq::ReqPreprocPluginConfig* temp = preproc_plugin_;
  preproc_plugin_ = NULL;
  return temp;
}
inline void ServerConfig::set_allocated_preproc_plugin(::anyq::ReqPreprocPluginConfig* preproc_plugin) {
  delete preproc_plugin_;
  preproc_plugin_ = preproc_plugin;
  if (preproc_plugin) {
    set_has_preproc_plugin();
  } else {
    clear_has_preproc_plugin();
  }
  // @@protoc_insertion_point(field_set_allocated:anyq.ServerConfig.preproc_plugin)
}

// required .anyq.ReqPostprocPluginConfig postproc_plugin = 9;
inline bool ServerConfig::has_postproc_plugin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServerConfig::set_has_postproc_plugin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServerConfig::clear_has_postproc_plugin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServerConfig::clear_postproc_plugin() {
  if (postproc_plugin_ != NULL) postproc_plugin_->::anyq::ReqPostprocPluginConfig::Clear();
  clear_has_postproc_plugin();
}
inline const ::anyq::ReqPostprocPluginConfig& ServerConfig::postproc_plugin() const {
  // @@protoc_insertion_point(field_get:anyq.ServerConfig.postproc_plugin)
  return postproc_plugin_ != NULL ? *postproc_plugin_
                         : *::anyq::ReqPostprocPluginConfig::internal_default_instance();
}
inline ::anyq::ReqPostprocPluginConfig* ServerConfig::mutable_postproc_plugin() {
  set_has_postproc_plugin();
  if (postproc_plugin_ == NULL) {
    postproc_plugin_ = new ::anyq::ReqPostprocPluginConfig;
  }
  // @@protoc_insertion_point(field_mutable:anyq.ServerConfig.postproc_plugin)
  return postproc_plugin_;
}
inline ::anyq::ReqPostprocPluginConfig* ServerConfig::release_postproc_plugin() {
  // @@protoc_insertion_point(field_release:anyq.ServerConfig.postproc_plugin)
  clear_has_postproc_plugin();
  ::anyq::ReqPostprocPluginConfig* temp = postproc_plugin_;
  postproc_plugin_ = NULL;
  return temp;
}
inline void ServerConfig::set_allocated_postproc_plugin(::anyq::ReqPostprocPluginConfig* postproc_plugin) {
  delete postproc_plugin_;
  postproc_plugin_ = postproc_plugin;
  if (postproc_plugin) {
    set_has_postproc_plugin();
  } else {
    clear_has_postproc_plugin();
  }
  // @@protoc_insertion_point(field_set_allocated:anyq.ServerConfig.postproc_plugin)
}

// optional string solr_clear_passwd = 10;
inline bool ServerConfig::has_solr_clear_passwd() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ServerConfig::set_has_solr_clear_passwd() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ServerConfig::clear_has_solr_clear_passwd() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ServerConfig::clear_solr_clear_passwd() {
  solr_clear_passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_solr_clear_passwd();
}
inline const ::std::string& ServerConfig::solr_clear_passwd() const {
  // @@protoc_insertion_point(field_get:anyq.ServerConfig.solr_clear_passwd)
  return solr_clear_passwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_solr_clear_passwd(const ::std::string& value) {
  set_has_solr_clear_passwd();
  solr_clear_passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:anyq.ServerConfig.solr_clear_passwd)
}
inline void ServerConfig::set_solr_clear_passwd(const char* value) {
  set_has_solr_clear_passwd();
  solr_clear_passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:anyq.ServerConfig.solr_clear_passwd)
}
inline void ServerConfig::set_solr_clear_passwd(const char* value, size_t size) {
  set_has_solr_clear_passwd();
  solr_clear_passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:anyq.ServerConfig.solr_clear_passwd)
}
inline ::std::string* ServerConfig::mutable_solr_clear_passwd() {
  set_has_solr_clear_passwd();
  // @@protoc_insertion_point(field_mutable:anyq.ServerConfig.solr_clear_passwd)
  return solr_clear_passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_solr_clear_passwd() {
  // @@protoc_insertion_point(field_release:anyq.ServerConfig.solr_clear_passwd)
  clear_has_solr_clear_passwd();
  return solr_clear_passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_solr_clear_passwd(::std::string* solr_clear_passwd) {
  if (solr_clear_passwd != NULL) {
    set_has_solr_clear_passwd();
  } else {
    clear_has_solr_clear_passwd();
  }
  solr_clear_passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), solr_clear_passwd);
  // @@protoc_insertion_point(field_set_allocated:anyq.ServerConfig.solr_clear_passwd)
}

inline const ServerConfig* ServerConfig::internal_default_instance() {
  return &ServerConfig_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace anyq

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_anyq_2eproto__INCLUDED
